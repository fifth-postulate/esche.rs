var N = null;var searchIndex = {};
searchIndex["box"]={"doc":"","items":[],"paths":[]};
searchIndex["either"]={"doc":"The enum [`Either`] with variants `Left` and `Right` is a general purpose sum type with two cases.","items":[[4,"Either","either","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",N,N],[13,"Left","","A value of type `L`.",0,N],[13,"Right","","A value of type `R`.",0,N],[11,"clone","","",0,[[["self"]],["either"]]],[11,"eq","","",0,[[["self"],["either"]],["bool"]]],[11,"ne","","",0,[[["self"],["either"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["either"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["either"]],["bool"]]],[11,"le","","",0,[[["self"],["either"]],["bool"]]],[11,"gt","","",0,[[["self"],["either"]],["bool"]]],[11,"ge","","",0,[[["self"],["either"]],["bool"]]],[11,"cmp","","",0,[[["self"],["either"]],["ordering"]]],[11,"hash","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"is_left","","Return true if the value is the `Left` variant.",0,[[["self"]],["bool"]]],[11,"is_right","","Return true if the value is the `Right` variant.",0,[[["self"]],["bool"]]],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,[[["self"]],["option"]]],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,[[["self"]],["option"]]],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,[[["self"]],["either"]]],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,[[["self"]],["either"]]],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,[[["self"]],["either"]]],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,[[["self"],["f"]],["either"]]],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,[[["self"],["f"]],["either"]]],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,[[["self"],["f"],["g"]],["t"]]],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,[[["self"],["ctx"],["f"],["g"]],["t"]]],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,[[["self"],["f"]],["either"]]],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,[[["self"],["f"]],["either"]]],[11,"into_iter","","Convert the inner value to an iterator.",0,[[["self"]],["either"]]],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",0,N],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",0,N],[11,"into_inner","","Extract the value of an either over two equivalent types.",0,[[["self"]],["t"]]],[11,"from","","",0,[[["result"]],["self"]]],[11,"into","","",0,[[["self"]],["result"]]],[11,"extend","","",0,[[["self"],["t"]]]],[11,"next","","",0,[[["self"]],["option"]]],[11,"size_hint","","",0,N],[11,"fold","","",0,[[["self"],["acc"],["g"]],["acc"]]],[11,"count","","",0,[[["self"]],["usize"]]],[11,"last","","",0,[[["self"]],["option"]]],[11,"nth","","",0,[[["self"],["usize"]],["option"]]],[11,"collect","","",0,[[["self"]],["b"]]],[11,"all","","",0,[[["self"],["f"]],["bool"]]],[11,"next_back","","",0,[[["self"]],["option"]]],[11,"as_ref","","",0,[[["self"]],["target"]]],[11,"as_mut","","",0,[[["self"]],["target"]]],[11,"deref","","",0,N],[11,"deref_mut","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[14,"try_left","","Macro for unwrapping the left side of an `Either`, which fails early with the opposite side. Can only be used in functions that return `Either` because of the early return of `Right` that it provides.",N,N],[14,"try_right","","Dual to `try_left!`, see its documentation for more information.",N,N]],"paths":[[4,"Either"]]};
searchIndex["eschers"]={"doc":"","items":[[0,"canvas","eschers","The canvas that we will draw on",N,N],[3,"Box","eschers::canvas","A Box represents the area and position that we will draw in.",N,N],[12,"a","","Determines the origin of the drawing area, used to position the box.",0,N],[12,"b","","Determines the x axis of the box.",0,N],[12,"c","","Determines the y axis of the box.",0,N],[5,"identity","","The identity function for Box",N,[[["box"]],["box"]]],[5,"turn_box","","Rotate box through 90 degrees",N,[[["box"]],["box"]]],[5,"flip_box","","Flip box vertically",N,[[["box"]],["box"]]],[5,"toss_box","","Toss box",N,[[["box"]],["box"]]],[5,"split_box_horizontally","","Create two boxes above each other that together make up the original box.",N,N],[5,"split_box_vertically","","Create two boxes beside each other that together make up the original box.",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["box"]],["bool"]]],[11,"ne","","",0,[[["self"],["box"]],["bool"]]],[11,"clone","","",0,[[["self"]],["box"]]],[11,"new","","Create a box from corresponding vectors",0,[[["vector",["f64"]],["vector",["f64"]],["vector",["f64"]]],["box"]]],[0,"fitting","eschers","Creating a `Picture` from `Shape`s",N,N],[5,"create_picture","eschers::fitting","Creates a `Picture`, i.e. a `Fn(canvas::Box) -> Vec<(Shape, Style)>`, from `Vec<Shape>`.",N,[[["vec",["shape"]]],["rc",[""]]]],[0,"picture","eschers","Descriptions of scenes",N,N],[5,"blank","eschers::picture","the blank picture",N,[[],["rc",[""]]]],[5,"turn","","Turn the picture",N,[[["rc"]],["rc",[""]]]],[5,"flip","","Flip the picture",N,[[["rc"]],["rc",[""]]]],[5,"toss","","Toss the picture",N,[[["rc"]],["rc",[""]]]],[5,"above_ratio","","Stack pictures above each other according to weight",N,[[["rc"],["rc"],["u8"],["u8"]],["rc",[""]]]],[5,"above","","Stack pictures above each other with equal weight",N,[[["rc"],["rc"]],["rc",[""]]]],[5,"beside_ratio","","Stack pictures beside each other according to weight",N,[[["rc"],["rc"],["u8"],["u8"]],["rc",[""]]]],[5,"beside","","Stack pictures above each other with equal weight",N,[[["rc"],["rc"]],["rc",[""]]]],[5,"quartet","","Create a quartet of pictures",N,[[["rc"],["rc"],["rc"],["rc"]],["rc",[""]]]],[5,"nonet","","Create a nonet of pictures",N,[[["rc"],["rc"],["rc"],["rc"],["rc"],["rc"],["rc"],["rc"],["rc"]],["rc",[""]]]],[5,"over","","Place two pictures over each other",N,[[["rc"],["rc"]],["rc",[""]]]],[5,"ttile","","The T-tile",N,[[["rc"]],["rc",[""]]]],[5,"utile","","The T-tile",N,[[["rc"]],["rc",[""]]]],[5,"side","","The side of the square limit",N,[[["rc"],["u8"]],["rc",[""]]]],[5,"corner","","The corner of the square limit",N,[[["rc"],["u8"]],["rc",[""]]]],[5,"square_limit","","The ultimate goal: Escher's Square Limit",N,[[["rc"],["u8"]],["rc",[""]]]],[6,"Rendering","","A collection of Shapes to draw",N,N],[0,"rendering","eschers","Turning a `Rendering` into an SVG.",N,N],[5,"to_svg","eschers::rendering","Create an SVG document from a `Rendering`",N,N],[0,"canvas","","Turning a `Box` into an SVG.",N,N],[5,"to_svg","eschers::rendering::canvas","Create an SVG document from a `Rendering`",N,N],[0,"shape","eschers","Primitives that can be drawn",N,N],[3,"ControlPoint","eschers::shape","Control points of a bezier path",N,N],[12,"mid_point1","","First middle control point",1,N],[12,"mid_point2","","Second middle control point",1,N],[12,"end_point","","Last control point",1,N],[4,"Shape","","Basic shapes that can be drawn",N,N],[13,"Line","","",2,N],[13,"PolyLine","","",2,N],[13,"Polygon","","",2,N],[13,"Curve","","",2,N],[13,"Path","","",2,N],[0,"escher","","Escher's famous fish.",N,N],[5,"fish","eschers::shape::escher","The fish",N,[[],["vec",["shape"]]]],[0,"grid","eschers::shape","An assortment of grids",N,N],[5,"rectangular","eschers::shape::grid","A rectangular grid with `m` horizontal dividing lines and `n` vertical dividing lines",N,[[["u8"],["u8"]],["vec",["shape"]]]],[5,"square","","A square grid  with `m` dividing lines both horizontally an vertically",N,[[["u8"]],["vec",["shape"]]]],[0,"letter","eschers::shape","An assortment of letters.",N,N],[5,"d","eschers::shape::letter","",N,[[],["vec",["shape"]]]],[11,"new","eschers::shape","Create a `ControlPoint` from the given `Vector`s.",1,[[["vector",["f64"]],["vector",["f64"]],["vector",["f64"]]],["controlpoint"]]],[0,"style","eschers","Styling of Pictures",N,N],[3,"Style","eschers::style","The various styling options",N,N],[12,"stroke_width","","Width of a pen stroke",3,N],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["style"]]],[11,"new","","Create a `Style` with a given stroke width",3,[[["f64"]],["style"]]],[0,"vector","eschers","2D vectors and associated functions",N,N],[3,"Vector","eschers::vector","Representation of two dimensional vector",N,N],[12,"x","","x-coordinate of the vector",4,N],[12,"y","","y-coordinate of the vector",4,N],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["vector"]],["bool"]]],[11,"ne","","",4,[[["self"],["vector"]],["bool"]]],[11,"clone","","",4,[[["self"]],["vector"]]],[11,"new","","Create a `Vector` with Cartesian coordinates `x` and `y`",4,[[["t"],["t"]],["self"]]],[11,"add","","Add `other` component-wise to `self`, returning a new `Vector`",4,[[["self"],["self"]],["self"]]],[11,"neg","","Negate `self` component-wise, returning a new `Vector`",4,[[["self"]],["self"]]],[11,"sub","","Subtract `other` component-wise from `self`, returning a new `Vector`",4,[[["self"],["self"]],["self"]]],[11,"scale","","Scale `self` uniformly by `factor`, returning a new `Vector`",4,[[["self"],["t"]],["self"]]],[11,"length","","Calculate the length of a `Vector<f64>`",4,[[["self"]],["f64"]]]],"paths":[[3,"Box"],[3,"ControlPoint"],[4,"Shape"],[3,"Style"],[3,"Vector"]]};
searchIndex["geometry"]={"doc":"","items":[],"paths":[]};
searchIndex["itertools"]={"doc":"Itertools — extra iterator adaptors, functions and macros.","items":[[4,"Either","itertools","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",N,N],[13,"Left","","A value of type `L`.",0,N],[13,"Right","","A value of type `R`.",0,N],[4,"Diff","","A type returned by the `diff_with` function.",N,N],[13,"FirstMismatch","","The index of the first non-matching element along with both iterator's remaining elements starting with the first mis-match.",1,N],[13,"Shorter","","The total number of elements that were in `J` along with the remaining elements of `I`.",1,N],[13,"Longer","","The total number of elements that were in `I` along with the remaining elements of `J`.",1,N],[4,"MinMaxResult","","`MinMaxResult` is an enum returned by `minmax`. See `Itertools::minmax()` for more detail.",N,N],[13,"NoElements","","Empty iterator",2,N],[13,"OneElement","","Iterator with one element, so the minimum and maximum are the same",2,N],[13,"MinMax","","More than one element in the iterator, the first element is not larger than the second",2,N],[4,"Position","","A value yielded by `WithPosition`. Indicates the position of this element in the iterator results.",N,N],[13,"First","","This is the first element.",3,N],[13,"Middle","","This is neither the first nor the last element.",3,N],[13,"Last","","This is the last element.",3,N],[13,"Only","","This is the only element.",3,N],[4,"EitherOrBoth","","Value that either holds a single A or B, or both.",N,N],[13,"Both","","Both values are present.",4,N],[13,"Left","","Only the left value of type `A` is present.",4,N],[13,"Right","","Only the right value of type `B` is present.",4,N],[4,"FoldWhile","","An enum used for controlling the execution of `.fold_while()`.",N,N],[13,"Continue","","Continue folding with this value",5,N],[13,"Done","","Fold is complete and will return this value",5,N],[5,"flatten","","Flatten an iterable of iterables into a single combined sequence of all the elements in the iterables.",N,[[["i"]],["flatten"]]],[5,"concat","","Combine all an iterator's elements into one element by using `Extend`.",N,N],[5,"cons_tuples","","Create an iterator that maps for example iterators of `((A, B), C)` to `(A, B, C)`.",N,[[["i"]],["constuples"]]],[5,"diff_with","","Compares every element yielded by both `i` and `j` with the given function in lock-step and returns a `Diff` which describes how `j` differs from `i`.",N,[[["i"],["j"],["f"]],["option",["diff"]]]],[5,"kmerge_by","","Create an iterator that merges elements of the contained iterators.",N,[[["i"],["f"]],["kmergeby"]]],[5,"process_results","","“Lift” a function of the values of an iterator so that it can process an iterator of `Result` values instead.",N,[[["i"],["f"]],["result"]]],[5,"repeat_n","","Create an iterator that produces `n` repetitions of `element`.",N,[[["a"],["usize"]],["repeatn"]]],[5,"repeat_call","","An iterator source that produces elements indefinitely by calling a given closure.",N,[[["f"]],["repeatcall"]]],[5,"unfold","","Creates a new unfold source with the specified closure as the \"iterator function\" and an initial state to eventually pass to the closure",N,[[["st"],["f"]],["unfold"]]],[5,"iterate","","Creates a new iterator that infinitely applies function to value and yields results.",N,[[["st"],["f"]],["iterate"]]],[5,"multizip","","An iterator that generalizes .zip() and allows running multiple iterators in lockstep.",N,[[["u"]],["zip"]]],[5,"interleave","","Create an iterator that interleaves elements in `i` and `j`.",N,[[["i"],["j"]],["interleave"]]],[5,"merge","","Create an iterator that merges elements in `i` and `j`.",N,[[["i"],["j"]],["merge"]]],[5,"put_back","","Create an iterator where you can put back a single item",N,[[["i"]],["putback"]]],[5,"put_back_n","","Create an iterator where you can put back multiple values to the front of the iteration.",N,[[["i"]],["putbackn"]]],[5,"multipeek","","An iterator adaptor that allows the user to peek at multiple `.next()` values without advancing the base iterator.",N,[[["i"]],["multipeek"]]],[5,"kmerge","","Create an iterator that merges elements of the contained iterators using the ordering function.",N,[[["i"]],["kmerge"]]],[5,"zip_eq","","Iterate `i` and `j` in lock step.",N,[[["i"],["j"]],["zipeq"]]],[5,"merge_join_by","","Return an iterator adaptor that merge-joins items from the two base iterators in ascending order.",N,[[["i"],["j"],["f"]],["mergejoinby"]]],[5,"rciter","","Return an iterator inside a `Rc<RefCell<_>>` wrapper.",N,[[["i"]],["rciter"]]],[5,"enumerate","","Iterate `iterable` with a running index.",N,[[["i"]],["enumerate"]]],[5,"rev","","Iterate `iterable` in reverse.",N,[[["i"]],["rev"]]],[5,"zip","","Iterate `i` and `j` in lock step.",N,[[["i"],["j"]],["zip"]]],[5,"chain","","Create an iterator that first iterates `i` and then `j`.",N,[[["i"],["j"]],["chain"]]],[5,"cloned","","Create an iterator that clones each element from &T to T",N,[[["i"]],["cloned"]]],[5,"fold","","Perform a fold operation over the iterable.",N,[[["i"],["b"],["f"]],["b"]]],[5,"all","","Test whether the predicate holds for all elements in the iterable.",N,[[["i"],["f"]],["bool"]]],[5,"any","","Test whether the predicate holds for any elements in the iterable.",N,[[["i"],["f"]],["bool"]]],[5,"max","","Return the maximum value of the iterable.",N,[[["i"]],["option"]]],[5,"min","","Return the minimum value of the iterable.",N,[[["i"]],["option"]]],[5,"join","","Combine all iterator elements into one String, seperated by `sep`.",N,[[["i"],["str"]],["string"]]],[5,"sorted","","Collect all the iterable's elements into a sorted vector in ascending order.",N,[[["i"]],["vec"]]],[5,"equal","","Return `true` if both iterables produce equal sequences (elements pairwise equal and sequences of the same length), `false` otherwise.",N,[[["i"],["j"]],["bool"]]],[5,"assert_equal","","Assert that two iterables produce equal sequences, with the same semantics as equal(a, b).",N,[[["i"],["j"]]]],[5,"partition","","Partition a sequence using predicate `pred` so that elements that map to `true` are placed before elements which map to `false`.",N,[[["i"],["f"]],["usize"]]],[0,"structs","","The concrete iterator types.",N,N],[3,"Dedup","itertools::structs","An iterator adaptor that removes repeated duplicates.",N,N],[3,"Interleave","","An iterator adaptor that alternates elements from two iterators until both run out.",N,N],[3,"InterleaveShortest","","An iterator adaptor that alternates elements from the two iterators until one of them runs out.",N,N],[3,"Product","","An iterator adaptor that iterates over the cartesian product of the element sets of two iterators `I` and `J`.",N,N],[3,"PutBack","","An iterator adaptor that allows putting back a single item to the front of the iterator.",N,N],[3,"Batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator and may pick off as many elements as it likes, to produce the next iterator element.",N,N],[3,"Step","","An iterator adaptor that steps a number elements in the base iterator for each iteration.",N,N],[3,"MapResults","","An iterator adapter to apply a transformation within a nested `Result`.",N,N],[3,"Merge","","An iterator adaptor that merges the two base iterators in ascending order. If both base iterators are sorted (ascending), the result is sorted.",N,N],[3,"MergeBy","","An iterator adaptor that merges the two base iterators in ascending order. If both base iterators are sorted (ascending), the result is sorted.",N,N],[3,"TakeWhileRef","","An iterator adaptor that borrows from a `Clone`-able iterator to only pick off elements while the predicate returns `true`.",N,N],[3,"WhileSome","","An iterator adaptor that filters `Option<A>` iterator elements and produces `A`. Stops on the first `None` encountered.",N,N],[3,"Coalesce","","An iterator adaptor that may join together adjacent elements.",N,N],[3,"TupleCombinations","","An iterator to iterate through all combinations in a `Clone`-able iterator that produces tuples of a specific size.",N,N],[3,"Flatten","","An iterator adapter to simply flatten a structure.",N,N],[3,"Positions","","An iterator adapter to get the positions of each element that matches a predicate.",N,N],[3,"Update","","An iterator adapter to apply a mutating function to each element before yielding it.",N,N],[3,"MultiProduct","","An iterator adaptor that iterates over the cartesian product of multiple iterators of type `I`.",N,N],[3,"Combinations","","An iterator to iterate through all the `n`-length combinations in an iterator.",N,N],[3,"ConsTuples","","An iterator that maps an iterator of tuples like `((A, B), C)` to an iterator of `(A, B, C)`.",N,N],[3,"Format","","Format all iterator elements lazily, separated by `sep`.",N,N],[3,"FormatWith","","Format all iterator elements lazily, separated by `sep`.",N,N],[3,"IntoChunks","","`ChunkLazy` is the storage for a lazy chunking operation.",N,N],[3,"Chunk","","An iterator for the elements in a single chunk.",N,N],[3,"Chunks","","An iterator that yields the Chunk iterators.",N,N],[3,"GroupBy","","`GroupBy` is the storage for the lazy grouping operation.",N,N],[3,"Group","","An iterator for the elements in a single group.",N,N],[3,"Groups","","An iterator that yields the Group iterators.",N,N],[3,"Intersperse","","An iterator adaptor to insert a particular value between each element of the adapted iterator.",N,N],[3,"KMerge","","An iterator adaptor that merges an abitrary number of base iterators in ascending order. If all base iterators are sorted (ascending), the result is sorted.",N,N],[3,"KMergeBy","","An iterator adaptor that merges an abitrary number of base iterators according to an ordering function.",N,N],[3,"MergeJoinBy","","An iterator adaptor that merge-joins items from the two base iterators in ascending order.",N,N],[3,"MultiPeek","","See `multipeek()` for more information.",N,N],[3,"PadUsing","","An iterator adaptor that pads a sequence to a minimum length by filling missing elements using a closure.",N,N],[3,"PeekingTakeWhile","","An iterator adaptor that takes items while a closure returns `true`.",N,N],[3,"ProcessResults","","An iterator that produces only the `T` values as long as the inner iterator produces `Ok(T)`.",N,N],[3,"PutBackN","","An iterator adaptor that allows putting multiple items in front of the iterator.",N,N],[3,"RcIter","","A wrapper for `Rc<RefCell<I>>`, that implements the `Iterator` trait.",N,N],[12,"rciter","","The boxed iterator.",6,N],[3,"RepeatN","","An iterator that produces n repetitions of an element.",N,N],[3,"RepeatCall","","See `repeat_call` for more information.",N,N],[3,"Unfold","","See `unfold` for more information.",N,N],[12,"state","","Internal state that will be passed to the closure on the next iteration",7,N],[3,"Iterate","","An iterator that infinitely applies function to value and yields results.",N,N],[3,"Tee","","One half of an iterator pair where both return the same elements.",N,N],[3,"TupleBuffer","","An iterator over a incomplete tuple.",N,N],[3,"TupleWindows","","An iterator over all contiguous windows that produces tuples of a specific size.",N,N],[3,"Tuples","","An iterator that groups the items in tuples of a specific size.",N,N],[3,"Unique","","An iterator adapter to filter out duplicate elements.",N,N],[3,"UniqueBy","","An iterator adapter to filter out duplicate elements.",N,N],[3,"WithPosition","","An iterator adaptor that wraps each element in an `Position`.",N,N],[3,"ZipEq","","An iterator which iterates two other iterators simultaneously",N,N],[3,"ZipLongest","","An iterator which iterates two other iterators simultaneously",N,N],[3,"Zip","","See `multizip` for more information.",N,N],[11,"clone","","",8,[[["self"]],["multiproduct"]]],[11,"next","","",8,[[["self"]],["option"]]],[11,"count","","",8,[[["self"]],["usize"]]],[11,"size_hint","","",8,N],[11,"last","","",8,[[["self"]],["option"]]],[11,"clone","","",9,[[["self"]],["interleave"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"next","","",9,[[["self"]],["option"]]],[11,"size_hint","","",9,N],[11,"clone","","",10,[[["self"]],["interleaveshortest"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"next","","",10,[[["self"]],["option"]]],[11,"size_hint","","",10,N],[11,"clone","","",11,[[["self"]],["putback"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"with_value","","put back value `value` (builder method)",11,N],[11,"into_parts","","Split the `PutBack` into its parts.",11,N],[11,"put_back","","Put back a single value to the front of the iterator.",11,N],[11,"next","","",11,[[["self"]],["option"]]],[11,"size_hint","","",11,N],[11,"all","","",11,[[["self"],["g"]],["bool"]]],[11,"fold","","",11,[[["self"],["acc"],["g"]],["acc"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"clone","","",12,[[["self"]],["product"]]],[11,"next","","",12,[[["self"]],["option"]]],[11,"size_hint","","",12,N],[11,"fold","","",12,[[["self"],["acc"],["g"]],["acc"]]],[11,"clone","","",13,[[["self"]],["batching"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"next","","",13,[[["self"]],["option"]]],[11,"size_hint","","",13,N],[11,"clone","","",14,[[["self"]],["step"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"next","","",14,[[["self"]],["option"]]],[11,"size_hint","","",14,N],[11,"clone","","",15,[[["self"]],["self"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"next","","",15,[[["self"]],["option"]]],[11,"size_hint","","",15,N],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"clone","","",16,[[["self"]],["self"]]],[11,"next","","",16,[[["self"]],["option"]]],[11,"size_hint","","",16,N],[11,"clone","","",17,[[["self"]],["self"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"next","","",17,[[["self"]],["option"]]],[11,"size_hint","","",17,N],[11,"clone","","",18,[[["self"]],["self"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"next","","",18,[[["self"]],["option"]]],[11,"size_hint","","",18,N],[11,"fold","","",18,[[["self"],["acc"],["g"]],["acc"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"next","","",19,[[["self"]],["option"]]],[11,"size_hint","","",19,N],[11,"clone","","",20,[[["self"]],["whilesome"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"next","","",20,[[["self"]],["option"]]],[11,"size_hint","","",20,N],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"next","","",21,[[["self"]],["option"]]],[11,"clone","","",22,[[["self"]],["flatten"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"next","","",22,[[["self"]],["option"]]],[11,"fold","","",22,[[["self"],["acc"],["g"]],["acc"]]],[11,"next","","",23,[[["self"]],["option"]]],[11,"size_hint","","",23,N],[11,"fold","","",23,[[["self"],["acc"],["fold"]],["acc"]]],[11,"collect","","",23,[[["self"]],["c"]]],[11,"next","","",24,[[["self"]],["option"]]],[11,"size_hint","","",24,N],[11,"next_back","","",24,[[["self"]],["option"]]],[11,"next","","",25,[[["self"]],["option"]]],[11,"size_hint","","",25,N],[11,"fold","","",25,[[["self"],["acc"],["g"]],["acc"]]],[11,"collect","","",25,[[["self"]],["c"]]],[11,"next_back","","",25,[[["self"]],["option"]]],[11,"clone","itertools","",4,[[["self"]],["eitherorboth"]]],[11,"eq","","",4,[[["self"],["eitherorboth"]],["bool"]]],[11,"ne","","",4,[[["self"],["eitherorboth"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"next","itertools::structs","",26,[[["self"]],["option"]]],[11,"size_hint","","",26,N],[11,"fold","","",26,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","","",26,[[["self"]],["option"]]],[11,"next","","",26,[[["self"]],["option"]]],[11,"size_hint","","",26,N],[11,"fold","","",26,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","","",26,[[["self"]],["option"]]],[11,"next","","",26,[[["self"]],["option"]]],[11,"size_hint","","",26,N],[11,"fold","","",26,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","","",26,[[["self"]],["option"]]],[11,"next","","",26,[[["self"]],["option"]]],[11,"size_hint","","",26,N],[11,"fold","","",26,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","","",26,[[["self"]],["option"]]],[11,"next","","",26,[[["self"]],["option"]]],[11,"size_hint","","",26,N],[11,"fold","","",26,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","","",26,[[["self"]],["option"]]],[11,"next","","",26,[[["self"]],["option"]]],[11,"size_hint","","",26,N],[11,"fold","","",26,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","","",26,[[["self"]],["option"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"clone","","",26,[[["self"]],["self"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"next","","",27,[[["self"]],["option"]]],[11,"clone","","",28,[[["self"]],["format"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"next","","",30,[[["self"]],["option"]]],[11,"drop","","",31,[[["self"]]]],[11,"next","","",31,[[["self"]],["option"]]],[11,"next","","",32,[[["self"]],["option"]]],[11,"drop","","",33,[[["self"]]]],[11,"next","","",33,[[["self"]],["option"]]],[11,"clone","","",34,[[["self"]],["intersperse"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"next","","",34,[[["self"]],["option"]]],[11,"size_hint","","",34,N],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"clone","","",35,[[["self"]],["kmerge"]]],[11,"next","","",35,[[["self"]],["option"]]],[11,"size_hint","","",35,N],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"next","","",36,[[["self"]],["option"]]],[11,"size_hint","","",36,N],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"next","","",37,[[["self"]],["option"]]],[11,"size_hint","","",37,N],[11,"clone","itertools","",2,[[["self"]],["minmaxresult"]]],[11,"eq","","",2,[[["self"],["minmaxresult"]],["bool"]]],[11,"ne","","",2,[[["self"],["minmaxresult"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"into_option","","`into_option` creates an `Option` of type `(T, T)`. The returned `Option` has variant `None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise `Some((x, y))` is returned where `x <= y`. If the `MinMaxResult` has variant `OneElement(x)`, performing this operation will make one clone of `x`.",2,[[["self"]],["option"]]],[11,"clone","itertools::structs","",38,[[["self"]],["multipeek"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"reset_peek","","Reset the peeking “cursor”",38,[[["self"]]]],[11,"peek","","Works exactly like `.next()` with the only difference that it doesn't advance itself. `.peek()` can be called multiple times, to peek further ahead.",38,[[["self"]],["option"]]],[11,"peeking_next","","",38,[[["self"],["f"]],["option"]]],[11,"next","","",38,[[["self"]],["option"]]],[11,"size_hint","","",38,N],[11,"clone","","",39,[[["self"]],["padusing"]]],[11,"next","","",39,[[["self"]],["option"]]],[11,"size_hint","","",39,N],[11,"next_back","","",39,[[["self"]],["option"]]],[11,"peeking_next","","",11,[[["self"],["f"]],["option"]]],[11,"peeking_next","","",40,[[["self"],["f"]],["option"]]],[11,"next","","",41,[[["self"]],["option"]]],[11,"size_hint","","",41,N],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"next","","",42,[[["self"]],["option"]]],[11,"size_hint","","",42,N],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"clone","","",40,[[["self"]],["putbackn"]]],[11,"put_back","","Puts x in front of the iterator. The values are yielded in order of the most recently put back values first.",40,N],[11,"next","","",40,[[["self"]],["option"]]],[11,"size_hint","","",40,N],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["rciter"]]],[11,"next","","",6,[[["self"]],["option"]]],[11,"size_hint","","",6,N],[11,"next_back","","",6,[[["self"]],["option"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"next","","",43,[[["self"]],["option"]]],[11,"size_hint","","",43,N],[11,"next_back","","",43,[[["self"]],["option"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"next","","",44,[[["self"]],["option"]]],[11,"size_hint","","",44,N],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["unfold"]]],[11,"next","","",7,[[["self"]],["option"]]],[11,"size_hint","","",7,N],[11,"clone","","",45,[[["self"]],["iterate"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"next","","",45,[[["self"]],["option"]]],[11,"size_hint","","",45,N],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"next","","",46,[[["self"]],["option"]]],[11,"size_hint","","",46,N],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"next","","",47,[[["self"]],["option"]]],[11,"size_hint","","",47,N],[11,"next","","",48,[[["self"]],["option"]]],[11,"into_buffer","","Return a buffer with the produced items that was not enough to be grouped in a tuple.",48,[[["self"]],["tuplebuffer"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"next","","",49,[[["self"]],["option"]]],[11,"clone","","",50,[[["self"]],["uniqueby"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"next","","",50,[[["self"]],["option"]]],[11,"size_hint","","",50,N],[11,"count","","",50,[[["self"]],["usize"]]],[11,"next","","",51,[[["self"]],["option"]]],[11,"size_hint","","",51,N],[11,"count","","",51,[[["self"]],["usize"]]],[11,"clone","","",51,[[["self"]],["unique"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"clone","itertools","",3,[[["self"]],["position"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["position"]],["bool"]]],[11,"ne","","",3,[[["self"],["position"]],["bool"]]],[11,"into_inner","","Return the inner value.",3,[[["self"]],["t"]]],[11,"next","itertools::structs","",52,[[["self"]],["option"]]],[11,"size_hint","","",52,N],[11,"clone","","",53,[[["self"]],["zipeq"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"next","","",53,[[["self"]],["option"]]],[11,"size_hint","","",53,N],[11,"clone","","",54,[[["self"]],["ziplongest"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"next","","",54,[[["self"]],["option"]]],[11,"size_hint","","",54,N],[11,"next_back","","",54,[[["self"]],["option"]]],[11,"clone","","",55,[[["self"]],["zip"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"from","","",55,N],[11,"next","","",55,[[["self"]],["option"]]],[11,"size_hint","","",55,N],[11,"from","","",55,N],[11,"next","","",55,[[["self"]],["option"]]],[11,"size_hint","","",55,N],[11,"from","","",55,N],[11,"next","","",55,[[["self"]],["option"]]],[11,"size_hint","","",55,N],[11,"from","","",55,N],[11,"next","","",55,[[["self"]],["option"]]],[11,"size_hint","","",55,N],[11,"from","","",55,N],[11,"next","","",55,[[["self"]],["option"]]],[11,"size_hint","","",55,N],[11,"from","","",55,N],[11,"next","","",55,[[["self"]],["option"]]],[11,"size_hint","","",55,N],[11,"from","","",55,N],[11,"next","","",55,[[["self"]],["option"]]],[11,"size_hint","","",55,N],[11,"from","","",55,N],[11,"next","","",55,[[["self"]],["option"]]],[11,"size_hint","","",55,N],[8,"PeekingNext","itertools","An iterator that allows peeking at an element before deciding to accept it.",N,N],[10,"peeking_next","","Pass a reference to the next iterator element to the closure `accept`; if `accept` returns true, return it as the next element, else None.",56,[[["self"],["f"]],["option"]]],[8,"Itertools","","The trait `Itertools`: extra iterator adaptors and methods for iterators.",N,N],[11,"interleave","","Alternate elements from two iterators until both have run out.",57,[[["self"],["j"]],["interleave"]]],[11,"interleave_shortest","","Alternate elements from two iterators until at least one of them has run out.",57,[[["self"],["j"]],["interleaveshortest"]]],[11,"intersperse","","An iterator adaptor to insert a particular value between each element of the adapted iterator.",57,N],[11,"zip_longest","","Create an iterator which iterates over both this and the specified iterator simultaneously, yielding pairs of two optional elements.",57,[[["self"],["j"]],["ziplongest"]]],[11,"zip_eq","","Create an iterator which iterates over both this and the specified iterator simultaneously, yielding pairs of elements.",57,[[["self"],["j"]],["zipeq"]]],[11,"batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator and may pick off as many elements as it likes, to produce the next iterator element.",57,[[["self"],["f"]],["batching"]]],[11,"group_by","","Return an iterable that can group iterator elements. Consecutive elements that map to the same key (“runs”), are assigned to the same group.",57,[[["self"],["f"]],["groupby"]]],[11,"chunks","","Return an iterable that can chunk the iterator.",57,[[["self"],["usize"]],["intochunks"]]],[11,"tuple_windows","","Return an iterator over all contiguous windows producing tuples of a specific size (up to 4).",57,[[["self"]],["tuplewindows"]]],[11,"tuples","","Return an iterator that groups the items in tuples of a specific size (up to 4).",57,[[["self"]],["tuples"]]],[11,"tee","","Split into an iterator pair that both yield all elements from the original iterator.",57,N],[11,"step","","Return an iterator adaptor that steps `n` elements in the base iterator for each iteration.",57,[[["self"],["usize"]],["step"]]],[11,"map_results","","Return an iterator adaptor that applies the provided closure to every `Result::Ok` value. `Result::Err` values are unchanged.",57,[[["self"],["f"]],["mapresults"]]],[11,"merge","","Return an iterator adaptor that merges the two base iterators in ascending order.  If both base iterators are sorted (ascending), the result is sorted.",57,[[["self"],["j"]],["merge"]]],[11,"merge_by","","Return an iterator adaptor that merges the two base iterators in order. This is much like `.merge()` but allows for a custom ordering.",57,[[["self"],["j"],["f"]],["mergeby"]]],[11,"merge_join_by","","Create an iterator that merges items from both this and the specified iterator in ascending order.",57,[[["self"],["j"],["f"]],["mergejoinby"]]],[11,"kmerge","","Return an iterator adaptor that flattens an iterator of iterators by merging them in ascending order.",57,[[["self"]],["kmerge"]]],[11,"kmerge_by","","Return an iterator adaptor that flattens an iterator of iterators by merging them according to the given closure.",57,[[["self"],["f"]],["kmergeby"]]],[11,"cartesian_product","","Return an iterator adaptor that iterates over the cartesian product of the element sets of two iterators `self` and `J`.",57,[[["self"],["j"]],["product"]]],[11,"multi_cartesian_product","","Return an iterator adaptor that iterates over the cartesian product of all subiterators returned by meta-iterator `self`.",57,[[["self"]],["multiproduct"]]],[11,"coalesce","","Return an iterator adaptor that uses the passed-in closure to optionally merge together consecutive elements.",57,[[["self"],["f"]],["coalesce"]]],[11,"dedup","","Remove duplicates from sections of consecutive identical elements. If the iterator is sorted, all elements will be unique.",57,[[["self"]],["dedup"]]],[11,"unique","","Return an iterator adaptor that filters out elements that have already been produced once during the iteration. Duplicates are detected using hash and equality.",57,[[["self"]],["unique"]]],[11,"unique_by","","Return an iterator adaptor that filters out elements that have already been produced once during the iteration.",57,[[["self"],["f"]],["uniqueby"]]],[11,"peeking_take_while","","Return an iterator adaptor that borrows from this iterator and takes items while the closure `accept` returns `true`.",57,[[["self"],["f"]],["peekingtakewhile"]]],[11,"take_while_ref","","Return an iterator adaptor that borrows from a `Clone`-able iterator to only pick off elements while the predicate `accept` returns `true`.",57,[[["self"],["f"]],["takewhileref"]]],[11,"while_some","","Return an iterator adaptor that filters `Option<A>` iterator elements and produces `A`. Stops on the first `None` encountered.",57,[[["self"]],["whilesome"]]],[11,"tuple_combinations","","Return an iterator adaptor that iterates over the combinations of the elements from an iterator.",57,[[["self"]],["tuplecombinations"]]],[11,"combinations","","Return an iterator adaptor that iterates over the `n`-length combinations of the elements from an iterator.",57,[[["self"],["usize"]],["combinations"]]],[11,"pad_using","","Return an iterator adaptor that pads the sequence to a minimum length of `min` by filling missing elements using a closure `f`.",57,[[["self"],["usize"],["f"]],["padusing"]]],[11,"flatten","","Flatten an iterator of iterables into a single combined sequence of all the elements in the iterables.",57,[[["self"]],["flatten"]]],[11,"with_position","","Return an iterator adaptor that wraps each element in a `Position` to ease special-case handling of the first or last elements.",57,[[["self"]],["withposition"]]],[11,"positions","","Return an iterator adaptor that yields the indices of all elements satisfying a predicate, counted from the start of the iterator.",57,[[["self"],["p"]],["positions"]]],[11,"update","","Return an iterator adaptor that applies a mutating function to each element before yielding it.",57,[[["self"],["f"]],["update"]]],[11,"next_tuple","","Advances the iterator and returns the next items grouped in a tuple of a specific size (up to 4).",57,[[["self"]],["option"]]],[11,"collect_tuple","","Collects all items from the iterator into a tuple of a specific size (up to 4).",57,[[["self"]],["option"]]],[11,"find_position","","Find the position and value of the first element satisfying a predicate.",57,[[["self"],["p"]],["option"]]],[11,"all_equal","","Check whether all elements compare equal.",57,[[["self"]],["bool"]]],[11,"dropping","","Consume the first `n` elements from the iterator eagerly, and return the same iterator again.",57,[[["self"],["usize"]],["self"]]],[11,"dropping_back","","Consume the last `n` elements from the iterator eagerly, and return the same iterator again.",57,[[["self"],["usize"]],["self"]]],[11,"foreach","","Run the closure `f` eagerly on each element of the iterator.",57,[[["self"],["f"]]]],[11,"concat","","Combine all an iterator's elements into one element by using `Extend`.",57,N],[11,"collect_vec","","`.collect_vec()` is simply a type specialization of `.collect()`, for convenience.",57,[[["self"]],["vec"]]],[11,"set_from","","Assign to each reference in `self` from the `from` iterator, stopping at the shortest of the two iterators.",57,[[["self"],["j"]],["usize"]]],[11,"join","","Combine all iterator elements into one String, seperated by `sep`.",57,[[["self"],["str"]],["string"]]],[11,"format","","Format all iterator elements, separated by `sep`.",57,[[["self"],["str"]],["format"]]],[11,"format_with","","Format all iterator elements, separated by `sep`.",57,[[["self"],["str"],["f"]],["formatwith"]]],[11,"fold_results","","Fold `Result` values from an iterator.",57,[[["self"],["b"],["f"]],["result"]]],[11,"fold_options","","Fold `Option` values from an iterator.",57,[[["self"],["b"],["f"]],["option"]]],[11,"fold1","","Accumulator of the elements in the iterator.",57,[[["self"],["f"]],["option"]]],[11,"tree_fold1","","Accumulate the elements in the iterator in a tree-like manner.",57,[[["self"],["f"]],["option"]]],[11,"fold_while","","An iterator method that applies a function, producing a single, final value.",57,[[["self"],["b"],["f"]],["foldwhile"]]],[11,"sorted","","Collect all iterator elements into a sorted vector in ascending order.",57,[[["self"]],["vec"]]],[11,"sorted_by","","Collect all iterator elements into a sorted vector.",57,[[["self"],["f"]],["vec"]]],[11,"sorted_by_key","","Collect all iterator elements into a sorted vector.",57,[[["self"],["f"]],["vec"]]],[11,"partition_map","","Collect all iterator elements into one of two partitions. Unlike `Iterator::partition`, each partition may have a distinct type.",57,N],[11,"into_group_map","","Return a `HashMap` of keys mapped to `Vec`s of values. Keys and values are taken from `(Key, Value)` tuple pairs yielded by the input iterator.",57,[[["self"]],["hashmap",["vec"]]]],[11,"minmax","","Return the minimum and maximum elements in the iterator.",57,[[["self"]],["minmaxresult"]]],[11,"minmax_by_key","","Return the minimum and maximum element of an iterator, as determined by the specified function.",57,[[["self"],["f"]],["minmaxresult"]]],[11,"minmax_by","","Return the minimum and maximum element of an iterator, as determined by the specified comparison function.",57,[[["self"],["f"]],["minmaxresult"]]],[11,"clone","","",5,[[["self"]],["foldwhile"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"into_inner","","Return the value in the continue or done.",5,[[["self"]],["t"]]],[11,"is_done","","Return true if `self` is `Done`, false if it is `Continue`.",5,[[["self"]],["bool"]]],[14,"iproduct","","Create an iterator over the “cartesian product” of iterators.",N,N],[14,"izip","","Create an iterator running multiple iterators in lockstep.",N,N],[11,"is_left","","Return true if the value is the `Left` variant.",0,[[["self"]],["bool"]]],[11,"is_right","","Return true if the value is the `Right` variant.",0,[[["self"]],["bool"]]],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,[[["self"]],["option"]]],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,[[["self"]],["option"]]],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,[[["self"]],["either"]]],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,[[["self"]],["either"]]],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,[[["self"]],["either"]]],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,[[["self"],["f"]],["either"]]],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,[[["self"],["f"]],["either"]]],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,[[["self"],["f"],["g"]],["t"]]],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,[[["self"],["ctx"],["f"],["g"]],["t"]]],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,[[["self"],["f"]],["either"]]],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,[[["self"],["f"]],["either"]]],[11,"into_iter","","Convert the inner value to an iterator.",0,[[["self"]],["either"]]],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",0,N],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",0,N],[11,"into_inner","","Extract the value of an either over two equivalent types.",0,[[["self"]],["t"]]],[11,"extend","","",0,N],[11,"from","","",0,[[["result"]],["either"]]],[11,"as_ref","","",0,[[["self"]],["target"]]],[11,"deref","","",0,N],[11,"hash","","",0,N],[11,"as_mut","","",0,[[["self"]],["target"]]],[11,"deref_mut","","",0,N],[11,"cmp","","",0,[[["self"],["either"]],["ordering"]]],[11,"partial_cmp","","",0,[[["self"],["either"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["either"]],["bool"]]],[11,"le","","",0,[[["self"],["either"]],["bool"]]],[11,"gt","","",0,[[["self"],["either"]],["bool"]]],[11,"ge","","",0,[[["self"],["either"]],["bool"]]],[11,"clone","","",0,[[["self"]],["either"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"next","","",0,[[["self"]],["option"]]],[11,"size_hint","","",0,N],[11,"fold","","",0,[[["self"],["acc"],["g"]],["acc"]]],[11,"count","","",0,[[["self"]],["usize"]]],[11,"last","","",0,[[["self"]],["option"]]],[11,"nth","","",0,[[["self"],["usize"]],["option"]]],[11,"collect","","",0,[[["self"]],["b"]]],[11,"all","","",0,[[["self"],["f"]],["bool"]]],[11,"next_back","","",0,[[["self"]],["option"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",0,[[["self"],["either"]],["bool"]]],[11,"ne","","",0,[[["self"],["either"]],["bool"]]],[11,"into","","",0,[[["self"]],["result"]]]],"paths":[[4,"Either"],[4,"Diff"],[4,"MinMaxResult"],[4,"Position"],[4,"EitherOrBoth"],[4,"FoldWhile"],[3,"RcIter"],[3,"Unfold"],[3,"MultiProduct"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"PutBack"],[3,"Product"],[3,"Batching"],[3,"Step"],[3,"Merge"],[3,"MergeBy"],[3,"Coalesce"],[3,"Dedup"],[3,"TakeWhileRef"],[3,"WhileSome"],[3,"TupleCombinations"],[3,"Flatten"],[3,"MapResults"],[3,"Positions"],[3,"Update"],[3,"ConsTuples"],[3,"Combinations"],[3,"Format"],[3,"FormatWith"],[3,"Groups"],[3,"Group"],[3,"Chunks"],[3,"Chunk"],[3,"Intersperse"],[3,"KMerge"],[3,"KMergeBy"],[3,"MergeJoinBy"],[3,"MultiPeek"],[3,"PadUsing"],[3,"PutBackN"],[3,"PeekingTakeWhile"],[3,"ProcessResults"],[3,"RepeatN"],[3,"RepeatCall"],[3,"Iterate"],[3,"Tee"],[3,"TupleBuffer"],[3,"Tuples"],[3,"TupleWindows"],[3,"UniqueBy"],[3,"Unique"],[3,"WithPosition"],[3,"ZipEq"],[3,"ZipLongest"],[3,"Zip"],[8,"PeekingNext"],[8,"Itertools"]]};
searchIndex["svg"]={"doc":"An SVG composer and parser.","items":[[5,"open","svg","Open a document.",N,[[["t"]],["result",["parser"]]]],[5,"read","","Read a document.",N,[[["t"]],["result",["parser"]]]],[5,"save","","Save a document.",N,[[["t"],["u"]],["result"]]],[5,"write","","Write a document.",N,[[["t"],["u"]],["result"]]],[0,"node","","The nodes.",N,N],[3,"Text","svg::node","A text node.",N,N],[3,"Value","","A value of an attribute.",N,N],[11,"clone","","",0,[[["self"]],["text"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a node.",0,[[["t"]],["self"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"append","","",0,[[["self"],["t"]]]],[11,"assign","","",0,[[["self"],["t"],["u"]]]],[11,"clone","","",1,[[["self"]],["value"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"deref","","",1,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"from","","",1,[[["i8"]],["self"]]],[11,"from","","",1,[[["i16"]],["self"]]],[11,"from","","",1,[[["i32"]],["self"]]],[11,"from","","",1,[[["i64"]],["self"]]],[11,"from","","",1,[[["isize"]],["self"]]],[11,"from","","",1,[[["u8"]],["self"]]],[11,"from","","",1,[[["u16"]],["self"]]],[11,"from","","",1,[[["u32"]],["self"]]],[11,"from","","",1,[[["u64"]],["self"]]],[11,"from","","",1,[[["usize"]],["self"]]],[11,"from","","",1,[[["f32"]],["self"]]],[11,"from","","",1,[[["f64"]],["self"]]],[11,"from","","",1,[[["string"]],["self"]]],[11,"from","","",1,[[["bool"]],["self"]]],[11,"from","","",1,[[["str"]],["value"]]],[11,"from","","",1,[[["vec"]],["self"]]],[11,"from","","",1,N],[11,"from","","",1,N],[0,"element","","The element nodes.",N,N],[3,"Animate","svg::node::element","An [`animate`][1] element. [1]: https://www.w3.org/TR/SVG/animate.html#AnimateElement",N,N],[3,"AnimateColor","","An [`animateColor`][1] element. [1]: https://www.w3.org/TR/SVG/animate.html#AnimateColorElement",N,N],[3,"AnimateMotion","","An [`animateMotion`][1] element. [1]: https://www.w3.org/TR/SVG/animate.html#AnimateMotionElement",N,N],[3,"AnimateTransform","","An [`animateTransform`][1] element. [1]: https://www.w3.org/TR/SVG/animate.html#AnimateTransformElement",N,N],[3,"Circle","","A [`circle`][1] element. [1]: https://www.w3.org/TR/SVG/shapes.html#CircleElement",N,N],[3,"ClipPath","","A [`clipPath`][1] element. [1]: https://www.w3.org/TR/SVG/masking.html#ClipPathElement",N,N],[3,"Definitions","","A [`defs`][1] element. [1]: https://www.w3.org/TR/SVG/struct.html#DefsElement",N,N],[3,"Description","","A [`desc`][1] element. [1]: https://www.w3.org/TR/SVG/struct.html#DescElement",N,N],[3,"Ellipse","","An [`ellipse`][1] element. [1]: https://www.w3.org/TR/SVG/shapes.html#EllipseElement",N,N],[3,"Filter","","A [`filter`][1] element. [1]: https://www.w3.org/TR/SVG/filters.html#FilterElement",N,N],[3,"Group","","A [`g`][1] element. [1]: https://www.w3.org/TR/SVG/struct.html#GElement",N,N],[3,"Image","","An [`image`][1] element. [1]: https://www.w3.org/TR/SVG/struct.html#ImageElement",N,N],[3,"Line","","A [`line`][1] element. [1]: https://www.w3.org/TR/SVG/shapes.html#LineElement",N,N],[3,"LinearGradient","","A [`linearGradient`][1] element. [1]: https://www.w3.org/TR/SVG/pservers.html#LinearGradientElement",N,N],[3,"Link","","An [`a`][1] element. [1]: https://www.w3.org/TR/SVG/linking.html#AElement",N,N],[3,"Marker","","A [`marker`][1] element. [1]: https://www.w3.org/TR/SVG/painting.html#MarkerElement",N,N],[3,"Mask","","A [`mask`][1] element. [1]: https://www.w3.org/TR/SVG/masking.html#MaskElement",N,N],[3,"MotionPath","","An [`mpath`][1] element. [1]: https://www.w3.org/TR/SVG/animate.html#MPathElement",N,N],[3,"Path","","A [`path`][1] element. [1]: https://www.w3.org/TR/SVG/paths.html#PathElement",N,N],[3,"Pattern","","A [`pattern`][1] element. [1]: https://www.w3.org/TR/SVG/pservers.html#PatternElement",N,N],[3,"Polygon","","A [`polygon`][1] element. [1]: https://www.w3.org/TR/SVG/shapes.html#PolygonElement",N,N],[3,"Polyline","","A [`polyline`][1] element. [1]: https://www.w3.org/TR/SVG/shapes.html#PolylineElement",N,N],[3,"RadialGradient","","A [`radialGradient`][1] element. [1]: https://www.w3.org/TR/SVG/pservers.html#RadialGradientElement",N,N],[3,"Rectangle","","A [`rect`][1] element. [1]: https://www.w3.org/TR/SVG/shapes.html#RectElement",N,N],[3,"Stop","","A [`stop`][1] element. [1]: https://www.w3.org/TR/SVG/pservers.html#StopElement",N,N],[3,"Symbol","","A [`symbol`][1] element. [1]: https://www.w3.org/TR/SVG/struct.html#SymbolElement",N,N],[3,"Text","","A [`text`][1] element. [1]: https://www.w3.org/TR/SVG/text.html#TextElement",N,N],[3,"TextPath","","A [`textPath`][1] element. [1]: https://www.w3.org/TR/SVG/text.html#TextPathElement",N,N],[3,"Title","","A [`title`][1] element. [1]: https://www.w3.org/TR/SVG/struct.html#TitleElement",N,N],[3,"Use","","A [`use`][1] element. [1]: https://www.w3.org/TR/SVG/struct.html#UseElement",N,N],[3,"SVG","","An [`svg`][1] element. [1]: https://www.w3.org/TR/SVG/struct.html#SVGElement",N,N],[3,"Script","","A [`script`][1] element. [1]: https://www.w3.org/TR/SVG/script.html#ScriptElement",N,N],[3,"Style","","A [`style`][1] element. [1]: https://www.w3.org/TR/SVG/styling.html#StyleElement",N,N],[0,"path","","The path element.",N,N],[3,"Data","svg::node::element::path","A [data][1] attribute.",N,N],[3,"Parameters","","Parameters of a command.",N,N],[4,"Command","","A command of a data attribute.",N,N],[13,"Move","","[Establish][1] a new current point.",2,N],[13,"Line","","[Draw][1] straight lines.",2,N],[13,"HorizontalLine","","[Draw][1] horizontal lines.",2,N],[13,"VerticalLine","","[Draw][1] vertical lines.",2,N],[13,"QuadraticCurve","","[Draw][1] a quadratic Bézier curve.",2,N],[13,"SmoothQuadraticCurve","","[Draw][1] a quadratic Bézier curve assuming the control point to be the reflection of the control point on the previous command relative to the current point.",2,N],[13,"CubicCurve","","[Draw][1] a cubic Bézier curve.",2,N],[13,"SmoothCubicCurve","","[Draw][1] a cubic Bézier curve assuming the first control point to be the reflection of the second control point on the previous command relative to the current point.",2,N],[13,"EllipticalArc","","[Draw][1] an elliptical arc.",2,N],[13,"Close","","[End][1] the current subpath.",2,N],[4,"Position","","A positioning method.",N,N],[13,"Absolute","","Absolute.",3,N],[13,"Relative","","Relative.",3,N],[11,"clone","","",2,[[["self"]],["command"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["data"]]],[11,"default","","",4,[[],["data"]]],[11,"new","","Create a data attribute.",4,[[],["self"]]],[11,"parse","","Parse a data attribute.",4,[[["str"]],["result"]]],[11,"move_to","","Add an absolute `Command::Move` command.",4,[[["self"],["t"]],["self"]]],[11,"move_by","","Add a relative `Command::Move` command.",4,[[["self"],["t"]],["self"]]],[11,"line_to","","Add an absolute `Command::Line` command.",4,[[["self"],["t"]],["self"]]],[11,"line_by","","Add a relative `Command::Line` command.",4,[[["self"],["t"]],["self"]]],[11,"horizontal_line_to","","Add an absolute `Command::HorizontalLine` command.",4,[[["self"],["t"]],["self"]]],[11,"horizontal_line_by","","Add a relative `Command::HorizontalLine` command.",4,[[["self"],["t"]],["self"]]],[11,"vertical_line_to","","Add an absolute `Command::VerticalLine` command.",4,[[["self"],["t"]],["self"]]],[11,"vertical_line_by","","Add a relative `Command::VerticalLine` command.",4,[[["self"],["t"]],["self"]]],[11,"quadratic_curve_to","","Add an absolute `Command::QuadraticCurve` command.",4,[[["self"],["t"]],["self"]]],[11,"quadratic_curve_by","","Add a relative `Command::QuadraticCurve` command.",4,[[["self"],["t"]],["self"]]],[11,"smooth_quadratic_curve_to","","Add an absolute `Command::SmoothQuadraticCurve` command.",4,[[["self"],["t"]],["self"]]],[11,"smooth_quadratic_curve_by","","Add a relative `Command::SmoothQuadraticCurve` command.",4,[[["self"],["t"]],["self"]]],[11,"cubic_curve_to","","Add an absolute `Command::CubicCurve` command.",4,[[["self"],["t"]],["self"]]],[11,"cubic_curve_by","","Add a relative `Command::CubicCurve` command.",4,[[["self"],["t"]],["self"]]],[11,"smooth_cubic_curve_to","","Add an absolute `Command::SmoothCubicCurve` command.",4,[[["self"],["t"]],["self"]]],[11,"smooth_cubic_curve_by","","Add a relative `Command::SmoothCubicCurve` command.",4,[[["self"],["t"]],["self"]]],[11,"elliptical_arc_to","","Add an absolute `Command::EllipticalArc` command.",4,[[["self"],["t"]],["self"]]],[11,"elliptical_arc_by","","Add a relative `Command::EllipticalArc` command.",4,[[["self"],["t"]],["self"]]],[11,"close","","Add a `Command::Close` command.",4,[[["self"]],["self"]]],[11,"deref","","",4,N],[11,"from","","",4,[[["vec",["command"]]],["self"]]],[11,"from","svg::node","",1,[[["data"]],["self"]]],[11,"clone","svg::node::element::path","",5,[[["self"]],["parameters"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"deref","","",5,N],[11,"from","","",5,[[["vec",["number"]]],["self"]]],[11,"from","","",5,[[["i8"]],["self"]]],[11,"from","","",5,[[["i16"]],["self"]]],[11,"from","","",5,[[["i32"]],["self"]]],[11,"from","","",5,[[["i64"]],["self"]]],[11,"from","","",5,[[["isize"]],["self"]]],[11,"from","","",5,[[["u8"]],["self"]]],[11,"from","","",5,[[["u16"]],["self"]]],[11,"from","","",5,[[["u32"]],["self"]]],[11,"from","","",5,[[["u64"]],["self"]]],[11,"from","","",5,[[["usize"]],["self"]]],[11,"from","","",5,[[["f32"]],["self"]]],[11,"from","","",5,[[["f64"]],["self"]]],[11,"from","","",5,N],[11,"from","","",5,N],[11,"from","","",5,N],[11,"from","","",5,N],[11,"from","","",5,N],[11,"from","","",5,N],[11,"from","","",5,N],[6,"Number","","A number.",N,N],[11,"clone","","",3,[[["self"]],["position"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["position"]],["bool"]]],[0,"tag","svg::node::element","The tags.",N,N],[3,"Tag","svg::node::element::tag","A tag.",N,N],[12,"0","","",6,N],[12,"1","","",6,N],[12,"2","","",6,N],[4,"Type","","A [type][1] of a tag.",N,N],[13,"Start","","A start tag.",7,N],[13,"End","","An end tag.",7,N],[13,"Empty","","An empty tag.",7,N],[17,"Animate","","animate",N,N],[17,"AnimateColor","","animateColor",N,N],[17,"AnimateMotion","","animateMotion",N,N],[17,"AnimateTransform","","animateTransform",N,N],[17,"Circle","","circle",N,N],[17,"ClipPath","","clipPath",N,N],[17,"Definitions","","defs",N,N],[17,"Description","","desc",N,N],[17,"Ellipse","","ellipse",N,N],[17,"Filter","","filter",N,N],[17,"Group","","g",N,N],[17,"Image","","image",N,N],[17,"Line","","line",N,N],[17,"LinearGradient","","linearGradient",N,N],[17,"Link","","a",N,N],[17,"Marker","","marker",N,N],[17,"Mask","","mask",N,N],[17,"MotionPath","","mpath",N,N],[17,"Path","","path",N,N],[17,"Pattern","","pattern",N,N],[17,"Polygon","","polygon",N,N],[17,"Polyline","","polyline",N,N],[17,"RadialGradient","","radialGradient",N,N],[17,"Rectangle","","rect",N,N],[17,"Script","","script",N,N],[17,"Stop","","stop",N,N],[17,"Style","","style",N,N],[17,"SVG","","svg",N,N],[17,"Symbol","","symbol",N,N],[17,"Text","","text",N,N],[17,"TextPath","","textPath",N,N],[17,"Title","","title",N,N],[17,"Use","","use",N,N],[11,"clone","","",6,[[["self"]],["tag"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["type"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"eq","","",7,[[["self"],["type"]],["bool"]]],[11,"parse","","Parse a tag.",6,[[["str"]],["result",["tag"]]]],[11,"clone","svg::node::element","",8,[[["self"]],["animate"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a node.",8,[[],["self"]]],[11,"add","","Append a node.",8,[[["self"],["t"]],["self"]]],[11,"set","","Assign an attribute.",8,[[["self"],["t"],["u"]],["self"]]],[11,"append","","",8,[[["self"],["t"]]]],[11,"assign","","",8,[[["self"],["t"],["u"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["animatecolor"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a node.",9,[[],["self"]]],[11,"add","","Append a node.",9,[[["self"],["t"]],["self"]]],[11,"set","","Assign an attribute.",9,[[["self"],["t"],["u"]],["self"]]],[11,"append","","",9,[[["self"],["t"]]]],[11,"assign","","",9,[[["self"],["t"],["u"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["animatemotion"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a node.",10,[[],["self"]]],[11,"add","","Append a node.",10,[[["self"],["t"]],["self"]]],[11,"set","","Assign an attribute.",10,[[["self"],["t"],["u"]],["self"]]],[11,"append","","",10,[[["self"],["t"]]]],[11,"assign","","",10,[[["self"],["t"],["u"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"clone","","",11,[[["self"]],["animatetransform"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a node.",11,[[],["self"]]],[11,"add","","Append a node.",11,[[["self"],["t"]],["self"]]],[11,"set","","Assign an attribute.",11,[[["self"],["t"],["u"]],["self"]]],[11,"append","","",11,[[["self"],["t"]]]],[11,"assign","","",11,[[["self"],["t"],["u"]]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"clone","","",12,[[["self"]],["circle"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a node.",12,[[],["self"]]],[11,"add","","Append a node.",12,[[["self"],["t"]],["self"]]],[11,"set","","Assign an attribute.",12,[[["self"],["t"],["u"]],["self"]]],[11,"append","","",12,[[["self"],["t"]]]],[11,"assign","","",12,[[["self"],["t"],["u"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["clippath"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a node.",13,[[],["self"]]],[11,"add","","Append a node.",13,[[["self"],["t"]],["self"]]],[11,"set","","Assign an attribute.",13,[[["self"],["t"],["u"]],["self"]]],[11,"append","","",13,[[["self"],["t"]]]],[11,"assign","","",13,[[["self"],["t"],["u"]]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",14,[[["self"]],["definitions"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a node.",14,[[],["self"]]],[11,"add","","Append a node.",14,[[["self"],["t"]],["self"]]],[11,"set","","Assign an attribute.",14,[[["self"],["t"],["u"]],["self"]]],[11,"append","","",14,[[["self"],["t"]]]],[11,"assign","","",14,[[["self"],["t"],["u"]]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"clone","","",15,[[["self"]],["description"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a node.",15,[[],["self"]]],[11,"add","","Append a node.",15,[[["self"],["t"]],["self"]]],[11,"set","","Assign an attribute.",15,[[["self"],["t"],["u"]],["self"]]],[11,"append","","",15,[[["self"],["t"]]]],[11,"assign","","",15,[[["self"],["t"],["u"]]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"clone","","",16,[[["self"]],["ellipse"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a node.",16,[[],["self"]]],[11,"add","","Append a node.",16,[[["self"],["t"]],["self"]]],[11,"set","","Assign an attribute.",16,[[["self"],["t"],["u"]],["self"]]],[11,"append","","",16,[[["self"],["t"]]]],[11,"assign","","",16,[[["self"],["t"],["u"]]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"clone","","",17,[[["self"]],["filter"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a node.",17,[[],["self"]]],[11,"add","","Append a node.",17,[[["self"],["t"]],["self"]]],[11,"set","","Assign an attribute.",17,[[["self"],["t"],["u"]],["self"]]],[11,"append","","",17,[[["self"],["t"]]]],[11,"assign","","",17,[[["self"],["t"],["u"]]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"clone","","",18,[[["self"]],["group"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a node.",18,[[],["self"]]],[11,"add","","Append a node.",18,[[["self"],["t"]],["self"]]],[11,"set","","Assign an attribute.",18,[[["self"],["t"],["u"]],["self"]]],[11,"append","","",18,[[["self"],["t"]]]],[11,"assign","","",18,[[["self"],["t"],["u"]]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"clone","","",19,[[["self"]],["image"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a node.",19,[[],["self"]]],[11,"add","","Append a node.",19,[[["self"],["t"]],["self"]]],[11,"set","","Assign an attribute.",19,[[["self"],["t"],["u"]],["self"]]],[11,"append","","",19,[[["self"],["t"]]]],[11,"assign","","",19,[[["self"],["t"],["u"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"clone","","",20,[[["self"]],["line"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a node.",20,[[],["self"]]],[11,"add","","Append a node.",20,[[["self"],["t"]],["self"]]],[11,"set","","Assign an attribute.",20,[[["self"],["t"],["u"]],["self"]]],[11,"append","","",20,[[["self"],["t"]]]],[11,"assign","","",20,[[["self"],["t"],["u"]]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"clone","","",21,[[["self"]],["lineargradient"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a node.",21,[[],["self"]]],[11,"add","","Append a node.",21,[[["self"],["t"]],["self"]]],[11,"set","","Assign an attribute.",21,[[["self"],["t"],["u"]],["self"]]],[11,"append","","",21,[[["self"],["t"]]]],[11,"assign","","",21,[[["self"],["t"],["u"]]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"clone","","",22,[[["self"]],["link"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a node.",22,[[],["self"]]],[11,"add","","Append a node.",22,[[["self"],["t"]],["self"]]],[11,"set","","Assign an attribute.",22,[[["self"],["t"],["u"]],["self"]]],[11,"append","","",22,[[["self"],["t"]]]],[11,"assign","","",22,[[["self"],["t"],["u"]]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"clone","","",23,[[["self"]],["marker"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a node.",23,[[],["self"]]],[11,"add","","Append a node.",23,[[["self"],["t"]],["self"]]],[11,"set","","Assign an attribute.",23,[[["self"],["t"],["u"]],["self"]]],[11,"append","","",23,[[["self"],["t"]]]],[11,"assign","","",23,[[["self"],["t"],["u"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"clone","","",24,[[["self"]],["mask"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a node.",24,[[],["self"]]],[11,"add","","Append a node.",24,[[["self"],["t"]],["self"]]],[11,"set","","Assign an attribute.",24,[[["self"],["t"],["u"]],["self"]]],[11,"append","","",24,[[["self"],["t"]]]],[11,"assign","","",24,[[["self"],["t"],["u"]]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"clone","","",25,[[["self"]],["motionpath"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a node.",25,[[],["self"]]],[11,"add","","Append a node.",25,[[["self"],["t"]],["self"]]],[11,"set","","Assign an attribute.",25,[[["self"],["t"],["u"]],["self"]]],[11,"append","","",25,[[["self"],["t"]]]],[11,"assign","","",25,[[["self"],["t"],["u"]]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"clone","","",26,[[["self"]],["path"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a node.",26,[[],["self"]]],[11,"add","","Append a node.",26,[[["self"],["t"]],["self"]]],[11,"set","","Assign an attribute.",26,[[["self"],["t"],["u"]],["self"]]],[11,"append","","",26,[[["self"],["t"]]]],[11,"assign","","",26,[[["self"],["t"],["u"]]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"clone","","",27,[[["self"]],["pattern"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a node.",27,[[],["self"]]],[11,"add","","Append a node.",27,[[["self"],["t"]],["self"]]],[11,"set","","Assign an attribute.",27,[[["self"],["t"],["u"]],["self"]]],[11,"append","","",27,[[["self"],["t"]]]],[11,"assign","","",27,[[["self"],["t"],["u"]]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"clone","","",28,[[["self"]],["polygon"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a node.",28,[[],["self"]]],[11,"add","","Append a node.",28,[[["self"],["t"]],["self"]]],[11,"set","","Assign an attribute.",28,[[["self"],["t"],["u"]],["self"]]],[11,"append","","",28,[[["self"],["t"]]]],[11,"assign","","",28,[[["self"],["t"],["u"]]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"clone","","",29,[[["self"]],["polyline"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a node.",29,[[],["self"]]],[11,"add","","Append a node.",29,[[["self"],["t"]],["self"]]],[11,"set","","Assign an attribute.",29,[[["self"],["t"],["u"]],["self"]]],[11,"append","","",29,[[["self"],["t"]]]],[11,"assign","","",29,[[["self"],["t"],["u"]]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"clone","","",30,[[["self"]],["radialgradient"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a node.",30,[[],["self"]]],[11,"add","","Append a node.",30,[[["self"],["t"]],["self"]]],[11,"set","","Assign an attribute.",30,[[["self"],["t"],["u"]],["self"]]],[11,"append","","",30,[[["self"],["t"]]]],[11,"assign","","",30,[[["self"],["t"],["u"]]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"clone","","",31,[[["self"]],["rectangle"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a node.",31,[[],["self"]]],[11,"add","","Append a node.",31,[[["self"],["t"]],["self"]]],[11,"set","","Assign an attribute.",31,[[["self"],["t"],["u"]],["self"]]],[11,"append","","",31,[[["self"],["t"]]]],[11,"assign","","",31,[[["self"],["t"],["u"]]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"clone","","",32,[[["self"]],["stop"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a node.",32,[[],["self"]]],[11,"add","","Append a node.",32,[[["self"],["t"]],["self"]]],[11,"set","","Assign an attribute.",32,[[["self"],["t"],["u"]],["self"]]],[11,"append","","",32,[[["self"],["t"]]]],[11,"assign","","",32,[[["self"],["t"],["u"]]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"clone","","",33,[[["self"]],["symbol"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a node.",33,[[],["self"]]],[11,"add","","Append a node.",33,[[["self"],["t"]],["self"]]],[11,"set","","Assign an attribute.",33,[[["self"],["t"],["u"]],["self"]]],[11,"append","","",33,[[["self"],["t"]]]],[11,"assign","","",33,[[["self"],["t"],["u"]]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"clone","","",34,[[["self"]],["text"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a node.",34,[[],["self"]]],[11,"add","","Append a node.",34,[[["self"],["t"]],["self"]]],[11,"set","","Assign an attribute.",34,[[["self"],["t"],["u"]],["self"]]],[11,"append","","",34,[[["self"],["t"]]]],[11,"assign","","",34,[[["self"],["t"],["u"]]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"clone","","",35,[[["self"]],["textpath"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a node.",35,[[],["self"]]],[11,"add","","Append a node.",35,[[["self"],["t"]],["self"]]],[11,"set","","Assign an attribute.",35,[[["self"],["t"],["u"]],["self"]]],[11,"append","","",35,[[["self"],["t"]]]],[11,"assign","","",35,[[["self"],["t"],["u"]]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"clone","","",36,[[["self"]],["title"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a node.",36,[[],["self"]]],[11,"add","","Append a node.",36,[[["self"],["t"]],["self"]]],[11,"set","","Assign an attribute.",36,[[["self"],["t"],["u"]],["self"]]],[11,"append","","",36,[[["self"],["t"]]]],[11,"assign","","",36,[[["self"],["t"],["u"]]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"clone","","",37,[[["self"]],["use"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a node.",37,[[],["self"]]],[11,"add","","Append a node.",37,[[["self"],["t"]],["self"]]],[11,"set","","Assign an attribute.",37,[[["self"],["t"],["u"]],["self"]]],[11,"append","","",37,[[["self"],["t"]]]],[11,"assign","","",37,[[["self"],["t"],["u"]]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"clone","","",38,[[["self"]],["svg"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a node.",38,[[],["self"]]],[11,"add","","Append a node.",38,[[["self"],["t"]],["self"]]],[11,"set","","Assign an attribute.",38,[[["self"],["t"],["u"]],["self"]]],[11,"append","","",38,[[["self"],["t"]]]],[11,"assign","","",38,[[["self"],["t"],["u"]]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"clone","","",39,[[["self"]],["script"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a node.",39,[[["t"]],["self"]]],[11,"add","","Append a node.",39,[[["self"],["t"]],["self"]]],[11,"set","","Assign an attribute.",39,[[["self"],["t"],["u"]],["self"]]],[11,"append","","",39,[[["self"],["t"]]]],[11,"assign","","",39,[[["self"],["t"],["u"]]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"clone","","",40,[[["self"]],["style"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a node.",40,[[["t"]],["self"]]],[11,"add","","Append a node.",40,[[["self"],["t"]],["self"]]],[11,"set","","Assign an attribute.",40,[[["self"],["t"],["u"]],["self"]]],[11,"append","","",40,[[["self"],["t"]]]],[11,"assign","","",40,[[["self"],["t"],["u"]]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[6,"Attributes","svg::node","Attributes.",N,N],[6,"Children","","Child nodes.",N,N],[8,"Node","","A node.",N,N],[10,"append","","Append a child node.",41,[[["self"],["t"]]]],[10,"assign","","Assign an attribute.",41,[[["self"],["t"],["u"]]]],[0,"parser","svg","The parser.",N,N],[3,"Error","svg::parser","An error.",N,N],[3,"Parser","","A parser.",N,N],[4,"Event","","An event.",N,N],[13,"Error","","An error.",42,N],[13,"Tag","","A tag.",42,N],[13,"Text","","A text.",42,N],[13,"Comment","","A comment.",42,N],[13,"Declaration","","A declaration.",42,N],[13,"Instruction","","An instruction.",42,N],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"new","","Create an error.",43,N],[11,"description","","",43,[[["self"]],["str"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[6,"Result","","A result.",N,N],[11,"new","","Create a parser.",44,[[["t"]],["self"]]],[11,"next","","",44,[[["self"]],["option"]]],[6,"Document","svg","A document.",N,N]],"paths":[[3,"Text"],[3,"Value"],[4,"Command"],[4,"Position"],[3,"Data"],[3,"Parameters"],[3,"Tag"],[4,"Type"],[3,"Animate"],[3,"AnimateColor"],[3,"AnimateMotion"],[3,"AnimateTransform"],[3,"Circle"],[3,"ClipPath"],[3,"Definitions"],[3,"Description"],[3,"Ellipse"],[3,"Filter"],[3,"Group"],[3,"Image"],[3,"Line"],[3,"LinearGradient"],[3,"Link"],[3,"Marker"],[3,"Mask"],[3,"MotionPath"],[3,"Path"],[3,"Pattern"],[3,"Polygon"],[3,"Polyline"],[3,"RadialGradient"],[3,"Rectangle"],[3,"Stop"],[3,"Symbol"],[3,"Text"],[3,"TextPath"],[3,"Title"],[3,"Use"],[3,"SVG"],[3,"Script"],[3,"Style"],[8,"Node"],[4,"Event"],[3,"Error"],[3,"Parser"]]};
initSearch(searchIndex);
