var searchIndex = {};
searchIndex["box"] = {"doc":"","items":[],"paths":[]};
searchIndex["either"] = {"doc":"The enum [`Either`] with variants `Left` and `Right` is a general purpose sum type with two cases.","items":[[4,"Either","either","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",null,null],[13,"Left","","A value of type `L`.",0,null],[13,"Right","","A value of type `R`.",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_left","","Return true if the value is the `Left` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,{"inputs":[{"name":"self"},{"name":"ctx"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"into_iter","","Convert the inner value to an iterator.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"into_inner","","Extract the value of an either over two equivalent types.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from","","",0,{"inputs":[{"name":"result"}],"output":{"name":"self"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"fold","","",0,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"count","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"collect","","",0,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"all","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"as_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"try_left","","Macro for unwrapping the left side of an `Either`, which fails early with the opposite side. Can only be used in functions that return `Either` because of the early return of `Right` that it provides.",null,null],[14,"try_right","","Dual to `try_left!`, see its documentation for more information.",null,null]],"paths":[[4,"Either"]]};
searchIndex["eschers"] = {"doc":"","items":[[0,"vector","eschers","2D vectors and associated functions",null,null],[3,"Vector","eschers::vector","Representation of two dimensional vector",null,null],[12,"x","","x-coordinate of the vector",0,null],[12,"y","","y-coordinate of the vector",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vector"}}],[11,"new","","Create a `Vector` with Cartesian coordinates `x` and `y`",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"add","","Add `other` component-wise to `self`, returning a new `Vector`",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"neg","","Negate `self` component-wise, returning a new `Vector`",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"sub","","Subtract `other` component-wise from `self`, returning a new `Vector`",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"scale","","Scale `self` uniformly by `factor`, returning a new `Vector`",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"length","","Calculate the length of a `Vector<f64>`",0,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[0,"canvas","eschers","The canvas that we will draw on",null,null],[3,"Box","eschers::canvas","A Box represents the area and position that we will draw in.",null,null],[12,"a","","Determines the origin of the drawing area, used to position the box.",1,null],[12,"b","","Determines the x axis of the box.",1,null],[12,"c","","Determines the y axis of the box.",1,null],[5,"identity","","The identity function for Box",null,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[5,"turn_box","","Rotate box through 90 degrees",null,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[5,"flip_box","","Flip box vertically",null,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[5,"toss_box","","Toss box",null,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[5,"split_box_horizontally","","Create two boxes above each other that together make up the original box.",null,null],[5,"split_box_vertically","","Create two boxes beside each other that together make up the original box.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"new","","Create a box from corresponding vectors",1,{"inputs":[{"generics":["f64"],"name":"vector"},{"generics":["f64"],"name":"vector"},{"generics":["f64"],"name":"vector"}],"output":{"name":"box"}}],[0,"shape","eschers","Primitives that can be drawn",null,null],[3,"ControlPoint","eschers::shape","Control points of a bezier path",null,null],[12,"mid_point1","","First middle control point",2,null],[12,"mid_point2","","Second middle control point",2,null],[12,"end_point","","Last control point",2,null],[4,"Shape","","Basic shapes that can be drawn",null,null],[13,"Line","","",3,null],[13,"PolyLine","","",3,null],[13,"Polygon","","",3,null],[13,"Curve","","",3,null],[13,"Path","","",3,null],[0,"letter","","An assortment of letters.",null,null],[5,"d","eschers::shape::letter","",null,{"inputs":[],"output":{"generics":["shape"],"name":"vec"}}],[0,"escher","eschers::shape","Escher's famous fish.",null,null],[5,"fish","eschers::shape::escher","The fish",null,{"inputs":[],"output":{"generics":["shape"],"name":"vec"}}],[0,"grid","eschers::shape","An assortment of grids",null,null],[5,"rectangular","eschers::shape::grid","A rectangular grid with `m` horizontal dividing lines and `n` vertical dividing lines",null,{"inputs":[{"name":"u8"},{"name":"u8"}],"output":{"generics":["shape"],"name":"vec"}}],[5,"square","","A square grid  with `m` dividing lines both horizontally an vertically",null,{"inputs":[{"name":"u8"}],"output":{"generics":["shape"],"name":"vec"}}],[11,"new","eschers::shape","Create a `ControlPoint` from the given `Vector`s.",2,{"inputs":[{"generics":["f64"],"name":"vector"},{"generics":["f64"],"name":"vector"},{"generics":["f64"],"name":"vector"}],"output":{"name":"controlpoint"}}],[0,"style","eschers","Styling of Pictures",null,null],[3,"Style","eschers::style","The various styling options",null,null],[12,"stroke_width","","Width of a pen stroke",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"new","","Create a `Style` with a given stroke width",4,{"inputs":[{"name":"f64"}],"output":{"name":"style"}}],[0,"picture","eschers","Descriptions of scenes",null,null],[5,"blank","eschers::picture","the blank picture",null,{"inputs":[],"output":{"name":"rc"}}],[5,"turn","","Turn the picture",null,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[5,"flip","","Flip the picture",null,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[5,"toss","","Toss the picture",null,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[5,"above_ratio","","Stack pictures above each other according to weight",null,{"inputs":[{"name":"rc"},{"name":"rc"},{"name":"u8"},{"name":"u8"}],"output":{"name":"rc"}}],[5,"above","","Stack pictures above each other with equal weight",null,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"rc"}}],[5,"beside_ratio","","Stack pictures beside each other according to weight",null,{"inputs":[{"name":"rc"},{"name":"rc"},{"name":"u8"},{"name":"u8"}],"output":{"name":"rc"}}],[5,"beside","","Stack pictures above each other with equal weight",null,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"rc"}}],[5,"quartet","","Create a quartet of pictures",null,{"inputs":[{"name":"rc"},{"name":"rc"},{"name":"rc"},{"name":"rc"}],"output":{"name":"rc"}}],[5,"nonet","","Create a nonet of pictures",null,{"inputs":[{"name":"rc"},{"name":"rc"},{"name":"rc"},{"name":"rc"},{"name":"rc"},{"name":"rc"},{"name":"rc"},{"name":"rc"},{"name":"rc"}],"output":{"name":"rc"}}],[5,"over","","Place two pictures over each other",null,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"rc"}}],[5,"ttile","","The T-tile",null,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[5,"utile","","The T-tile",null,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[5,"side","","The side of the square limit",null,{"inputs":[{"name":"rc"},{"name":"u8"}],"output":{"name":"rc"}}],[5,"corner","","The corner of the square limit",null,{"inputs":[{"name":"rc"},{"name":"u8"}],"output":{"name":"rc"}}],[5,"square_limit","","The ultimate goal: Escher's Square Limit",null,{"inputs":[{"name":"rc"},{"name":"u8"}],"output":{"name":"rc"}}],[6,"Rendering","","A collection of Shapes to draw",null,null],[0,"fitting","eschers","Creating a `Picture` from `Shape`s",null,null],[5,"create_picture","eschers::fitting","Creates a `Picture`, i.e. a `Fn(canvas::Box) -> Vec<(Shape, Style)>`, from `Vec<Shape>`.",null,{"inputs":[{"generics":["shape"],"name":"vec"}],"output":{"name":"rc"}}],[0,"rendering","eschers","Turning a `Rendering` into an SVG.",null,null],[5,"to_svg","eschers::rendering","Create an SVG document from a `Rendering`",null,null],[0,"canvas","","Turning a `Box` into an SVG.",null,null],[5,"to_svg","eschers::rendering::canvas","Create an SVG document from a `Rendering`",null,null]],"paths":[[3,"Vector"],[3,"Box"],[3,"ControlPoint"],[4,"Shape"],[3,"Style"]]};
searchIndex["geometry"] = {"doc":"","items":[],"paths":[]};
searchIndex["itertools"] = {"doc":"Itertools — extra iterator adaptors, functions and macros.","items":[[4,"Either","itertools","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",null,null],[13,"Left","","A value of type `L`.",0,null],[13,"Right","","A value of type `R`.",0,null],[4,"Diff","","A type returned by the `diff_with` function.",null,null],[13,"FirstMismatch","","The index of the first non-matching element along with both iterator's remaining elements starting with the first mis-match.",1,null],[13,"Shorter","","The total number of elements that were in `J` along with the remaining elements of `I`.",1,null],[13,"Longer","","The total number of elements that were in `I` along with the remaining elements of `J`.",1,null],[4,"MinMaxResult","","`MinMaxResult` is an enum returned by `minmax`. See `Itertools::minmax()` for more detail.",null,null],[13,"NoElements","","Empty iterator",2,null],[13,"OneElement","","Iterator with one element, so the minimum and maximum are the same",2,null],[13,"MinMax","","More than one element in the iterator, the first element is not larger than the second",2,null],[4,"Position","","A value yielded by `WithPosition`. Indicates the position of this element in the iterator results.",null,null],[13,"First","","This is the first element.",3,null],[13,"Middle","","This is neither the first nor the last element.",3,null],[13,"Last","","This is the last element.",3,null],[13,"Only","","This is the only element.",3,null],[4,"EitherOrBoth","","Value that either holds a single A or B, or both.",null,null],[13,"Both","","Both values are present.",4,null],[13,"Left","","Only the left value of type `A` is present.",4,null],[13,"Right","","Only the right value of type `B` is present.",4,null],[4,"FoldWhile","","An enum used for controlling the execution of `.fold_while()`.",null,null],[13,"Continue","","Continue folding with this value",5,null],[13,"Done","","Fold is complete and will return this value",5,null],[5,"flatten","","Flatten an iterable of iterables into a single combined sequence of all the elements in the iterables.",null,{"inputs":[{"name":"i"}],"output":{"name":"flatten"}}],[5,"concat","","Combine all an iterator's elements into one element by using `Extend`.",null,null],[5,"cons_tuples","","Create an iterator that maps for example iterators of `((A, B), C)` to `(A, B, C)`.",null,{"inputs":[{"name":"i"}],"output":{"name":"constuples"}}],[5,"diff_with","","Compares every element yielded by both `i` and `j` with the given function in lock-step and returns a `Diff` which describes how `j` differs from `i`.",null,{"inputs":[{"name":"i"},{"name":"j"},{"name":"f"}],"output":{"generics":["diff"],"name":"option"}}],[5,"kmerge_by","","Create an iterator that merges elements of the contained iterators.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"kmergeby"}}],[5,"process_results","","“Lift” a function of the values of an iterator so that it can process an iterator of `Result` values instead.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"result"}}],[5,"repeat_n","","Create an iterator that produces `n` repetitions of `element`.",null,{"inputs":[{"name":"a"},{"name":"usize"}],"output":{"name":"repeatn"}}],[5,"repeat_call","","An iterator source that produces elements indefinitely by calling a given closure.",null,{"inputs":[{"name":"f"}],"output":{"name":"repeatcall"}}],[5,"unfold","","Creates a new unfold source with the specified closure as the \"iterator function\" and an initial state to eventually pass to the closure",null,{"inputs":[{"name":"st"},{"name":"f"}],"output":{"name":"unfold"}}],[5,"iterate","","Creates a new iterator that infinitely applies function to value and yields results.",null,{"inputs":[{"name":"st"},{"name":"f"}],"output":{"name":"iterate"}}],[5,"multizip","","An iterator that generalizes .zip() and allows running multiple iterators in lockstep.",null,{"inputs":[{"name":"u"}],"output":{"name":"zip"}}],[5,"interleave","","Create an iterator that interleaves elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleave"}}],[5,"merge","","Create an iterator that merges elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"merge"}}],[5,"put_back","","Create an iterator where you can put back a single item",null,{"inputs":[{"name":"i"}],"output":{"name":"putback"}}],[5,"put_back_n","","Create an iterator where you can put back multiple values to the front of the iteration.",null,{"inputs":[{"name":"i"}],"output":{"name":"putbackn"}}],[5,"multipeek","","An iterator adaptor that allows the user to peek at multiple `.next()` values without advancing the base iterator.",null,{"inputs":[{"name":"i"}],"output":{"name":"multipeek"}}],[5,"kmerge","","Create an iterator that merges elements of the contained iterators using the ordering function.",null,{"inputs":[{"name":"i"}],"output":{"name":"kmerge"}}],[5,"zip_eq","","Iterate `i` and `j` in lock step.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"zipeq"}}],[5,"merge_join_by","","Return an iterator adaptor that merge-joins items from the two base iterators in ascending order.",null,{"inputs":[{"name":"i"},{"name":"j"},{"name":"f"}],"output":{"name":"mergejoinby"}}],[5,"rciter","","Return an iterator inside a `Rc<RefCell<_>>` wrapper.",null,{"inputs":[{"name":"i"}],"output":{"name":"rciter"}}],[5,"enumerate","","Iterate `iterable` with a running index.",null,{"inputs":[{"name":"i"}],"output":{"name":"enumerate"}}],[5,"rev","","Iterate `iterable` in reverse.",null,{"inputs":[{"name":"i"}],"output":{"name":"rev"}}],[5,"zip","","Iterate `i` and `j` in lock step.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"zip"}}],[5,"chain","","Create an iterator that first iterates `i` and then `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"chain"}}],[5,"cloned","","Create an iterator that clones each element from &T to T",null,{"inputs":[{"name":"i"}],"output":{"name":"cloned"}}],[5,"fold","","Perform a fold operation over the iterable.",null,{"inputs":[{"name":"i"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[5,"all","","Test whether the predicate holds for all elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"any","","Test whether the predicate holds for any elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"max","","Return the maximum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"min","","Return the minimum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"join","","Combine all iterator elements into one String, seperated by `sep`.",null,{"inputs":[{"name":"i"},{"name":"str"}],"output":{"name":"string"}}],[5,"sorted","","Collect all the iterable's elements into a sorted vector in ascending order.",null,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[5,"equal","","Return `true` if both iterables produce equal sequences (elements pairwise equal and sequences of the same length), `false` otherwise.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"bool"}}],[5,"assert_equal","","Assert that two iterables produce equal sequences, with the same semantics as equal(a, b).",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":null}],[5,"partition","","Partition a sequence using predicate `pred` so that elements that map to `true` are placed before elements which map to `false`.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"usize"}}],[0,"structs","","The concrete iterator types.",null,null],[3,"Dedup","itertools::structs","An iterator adaptor that removes repeated duplicates.",null,null],[3,"Interleave","","An iterator adaptor that alternates elements from two iterators until both run out.",null,null],[3,"InterleaveShortest","","An iterator adaptor that alternates elements from the two iterators until one of them runs out.",null,null],[3,"Product","","An iterator adaptor that iterates over the cartesian product of the element sets of two iterators `I` and `J`.",null,null],[3,"PutBack","","An iterator adaptor that allows putting back a single item to the front of the iterator.",null,null],[3,"Batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator and may pick off as many elements as it likes, to produce the next iterator element.",null,null],[3,"Step","","An iterator adaptor that steps a number elements in the base iterator for each iteration.",null,null],[3,"MapResults","","An iterator adapter to apply a transformation within a nested `Result`.",null,null],[3,"Merge","","An iterator adaptor that merges the two base iterators in ascending order. If both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MergeBy","","An iterator adaptor that merges the two base iterators in ascending order. If both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"TakeWhileRef","","An iterator adaptor that borrows from a `Clone`-able iterator to only pick off elements while the predicate returns `true`.",null,null],[3,"WhileSome","","An iterator adaptor that filters `Option<A>` iterator elements and produces `A`. Stops on the first `None` encountered.",null,null],[3,"Coalesce","","An iterator adaptor that may join together adjacent elements.",null,null],[3,"TupleCombinations","","An iterator to iterate through all combinations in a `Clone`-able iterator that produces tuples of a specific size.",null,null],[3,"Flatten","","An iterator adapter to simply flatten a structure.",null,null],[3,"Positions","","An iterator adapter to get the positions of each element that matches a predicate.",null,null],[3,"Update","","An iterator adapter to apply a mutating function to each element before yielding it.",null,null],[3,"MultiProduct","","An iterator adaptor that iterates over the cartesian product of multiple iterators of type `I`.",null,null],[3,"Combinations","","An iterator to iterate through all the `n`-length combinations in an iterator.",null,null],[3,"ConsTuples","","An iterator that maps an iterator of tuples like `((A, B), C)` to an iterator of `(A, B, C)`.",null,null],[3,"Format","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"FormatWith","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"IntoChunks","","`ChunkLazy` is the storage for a lazy chunking operation.",null,null],[3,"Chunk","","An iterator for the elements in a single chunk.",null,null],[3,"Chunks","","An iterator that yields the Chunk iterators.",null,null],[3,"GroupBy","","`GroupBy` is the storage for the lazy grouping operation.",null,null],[3,"Group","","An iterator for the elements in a single group.",null,null],[3,"Groups","","An iterator that yields the Group iterators.",null,null],[3,"Intersperse","","An iterator adaptor to insert a particular value between each element of the adapted iterator.",null,null],[3,"KMerge","","An iterator adaptor that merges an abitrary number of base iterators in ascending order. If all base iterators are sorted (ascending), the result is sorted.",null,null],[3,"KMergeBy","","An iterator adaptor that merges an abitrary number of base iterators according to an ordering function.",null,null],[3,"MergeJoinBy","","An iterator adaptor that merge-joins items from the two base iterators in ascending order.",null,null],[3,"MultiPeek","","See `multipeek()` for more information.",null,null],[3,"PadUsing","","An iterator adaptor that pads a sequence to a minimum length by filling missing elements using a closure.",null,null],[3,"PeekingTakeWhile","","An iterator adaptor that takes items while a closure returns `true`.",null,null],[3,"ProcessResults","","An iterator that produces only the `T` values as long as the inner iterator produces `Ok(T)`.",null,null],[3,"PutBackN","","An iterator adaptor that allows putting multiple items in front of the iterator.",null,null],[3,"RcIter","","A wrapper for `Rc<RefCell<I>>`, that implements the `Iterator` trait.",null,null],[12,"rciter","","The boxed iterator.",6,null],[3,"RepeatN","","An iterator that produces n repetitions of an element.",null,null],[3,"RepeatCall","","See `repeat_call` for more information.",null,null],[3,"Unfold","","See `unfold` for more information.",null,null],[12,"state","","Internal state that will be passed to the closure on the next iteration",7,null],[3,"Iterate","","An iterator that infinitely applies function to value and yields results.",null,null],[3,"Tee","","One half of an iterator pair where both return the same elements.",null,null],[3,"TupleBuffer","","An iterator over a incomplete tuple.",null,null],[3,"TupleWindows","","An iterator over all contiguous windows that produces tuples of a specific size.",null,null],[3,"Tuples","","An iterator that groups the items in tuples of a specific size.",null,null],[3,"Unique","","An iterator adapter to filter out duplicate elements.",null,null],[3,"UniqueBy","","An iterator adapter to filter out duplicate elements.",null,null],[3,"WithPosition","","An iterator adaptor that wraps each element in an `Position`.",null,null],[3,"ZipEq","","An iterator which iterates two other iterators simultaneously",null,null],[3,"ZipLongest","","An iterator which iterates two other iterators simultaneously",null,null],[3,"Zip","","See `multizip` for more information.",null,null],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"multiproduct"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",8,null],[11,"last","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"interleave"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"interleaveshortest"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"putback"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_value","","put back value `value` (builder method)",11,null],[11,"into_parts","","Split the `PutBack` into its parts.",11,null],[11,"put_back","","Put back a single value to the front of the iterator.",11,null],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"all","","",11,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"bool"}}],[11,"fold","","",11,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"product"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"fold","","",12,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"batching"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"step"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",14,null],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",16,null],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",18,null],[11,"fold","","",18,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",19,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"whilesome"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",20,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fold","","",22,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"next","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",23,null],[11,"fold","","",23,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"collect","","",23,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[11,"next","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",24,null],[11,"next_back","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",25,null],[11,"fold","","",25,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"collect","","",25,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[11,"next_back","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","itertools","",4,{"inputs":[{"name":"self"}],"output":{"name":"eitherorboth"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"eitherorboth"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"eitherorboth"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","itertools::structs","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",26,null],[11,"fold","","",26,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",26,null],[11,"fold","","",26,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",26,null],[11,"fold","","",26,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",26,null],[11,"fold","","",26,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",26,null],[11,"fold","","",26,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",26,null],[11,"fold","","",26,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"format"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",31,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",31,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"intersperse"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",34,null],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"kmerge"}}],[11,"next","","",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",35,null],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",36,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",37,null],[11,"clone","itertools","",2,{"inputs":[{"name":"self"}],"output":{"name":"minmaxresult"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"minmaxresult"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"minmaxresult"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_option","","`into_option` creates an `Option` of type `(T, T)`. The returned `Option` has variant `None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise `Some((x, y))` is returned where `x <= y`. If the `MinMaxResult` has variant `OneElement(x)`, performing this operation will make one clone of `x`.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","itertools::structs","",38,{"inputs":[{"name":"self"}],"output":{"name":"multipeek"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reset_peek","","Reset the peeking “cursor”",38,{"inputs":[{"name":"self"}],"output":null}],[11,"peek","","Works exactly like `.next()` with the only difference that it doesn't advance itself. `.peek()` can be called multiple times, to peek further ahead.",38,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"peeking_next","","",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"next","","",38,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",38,null],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"padusing"}}],[11,"next","","",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",39,null],[11,"next_back","","",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"peeking_next","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"peeking_next","","",40,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"next","","",41,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",41,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",42,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",42,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"putbackn"}}],[11,"put_back","","Puts x in front of the iterator. The values are yielded in order of the most recently put back values first.",40,null],[11,"next","","",40,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",40,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"rciter"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",43,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",43,null],[11,"next_back","","",43,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",44,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",44,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"unfold"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"iterate"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",45,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",45,null],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",46,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",46,null],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",47,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",47,null],[11,"next","","",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_buffer","","Return a buffer with the produced items that was not enough to be grouped in a tuple.",48,{"inputs":[{"name":"self"}],"output":{"name":"tuplebuffer"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"uniqueby"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"count","","",50,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",51,null],[11,"count","","",51,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"unique"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","itertools","",3,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"into_inner","","Return the inner value.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"next","itertools::structs","",52,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"zipeq"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"ziplongest"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",54,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"next_back","","",54,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"zip"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",55,null],[11,"next","","",55,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[11,"from","","",55,null],[11,"next","","",55,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[11,"from","","",55,null],[11,"next","","",55,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[11,"from","","",55,null],[11,"next","","",55,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[11,"from","","",55,null],[11,"next","","",55,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[11,"from","","",55,null],[11,"next","","",55,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[11,"from","","",55,null],[11,"next","","",55,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[11,"from","","",55,null],[11,"next","","",55,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[8,"PeekingNext","itertools","An iterator that allows peeking at an element before deciding to accept it.",null,null],[10,"peeking_next","","Pass a reference to the next iterator element to the closure `accept`; if `accept` returns true, return it as the next element, else None.",56,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[8,"Itertools","","The trait `Itertools`: extra iterator adaptors and methods for iterators.",null,null],[11,"interleave","","Alternate elements from two iterators until both have run out.",57,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"interleave"}}],[11,"interleave_shortest","","Alternate elements from two iterators until at least one of them has run out.",57,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"interleaveshortest"}}],[11,"intersperse","","An iterator adaptor to insert a particular value between each element of the adapted iterator.",57,null],[11,"zip_longest","","Create an iterator which iterates over both this and the specified iterator simultaneously, yielding pairs of two optional elements.",57,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"ziplongest"}}],[11,"zip_eq","","Create an iterator which iterates over both this and the specified iterator simultaneously, yielding pairs of elements.",57,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"zipeq"}}],[11,"batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator and may pick off as many elements as it likes, to produce the next iterator element.",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"batching"}}],[11,"group_by","","Return an iterable that can group iterator elements. Consecutive elements that map to the same key (“runs”), are assigned to the same group.",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"groupby"}}],[11,"chunks","","Return an iterable that can chunk the iterator.",57,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"intochunks"}}],[11,"tuple_windows","","Return an iterator over all contiguous windows producing tuples of a specific size (up to 4).",57,{"inputs":[{"name":"self"}],"output":{"name":"tuplewindows"}}],[11,"tuples","","Return an iterator that groups the items in tuples of a specific size (up to 4).",57,{"inputs":[{"name":"self"}],"output":{"name":"tuples"}}],[11,"tee","","Split into an iterator pair that both yield all elements from the original iterator.",57,null],[11,"step","","Return an iterator adaptor that steps `n` elements in the base iterator for each iteration.",57,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"step"}}],[11,"map_results","","Return an iterator adaptor that applies the provided closure to every `Result::Ok` value. `Result::Err` values are unchanged.",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"mapresults"}}],[11,"merge","","Return an iterator adaptor that merges the two base iterators in ascending order.  If both base iterators are sorted (ascending), the result is sorted.",57,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"merge"}}],[11,"merge_by","","Return an iterator adaptor that merges the two base iterators in order. This is much like `.merge()` but allows for a custom ordering.",57,{"inputs":[{"name":"self"},{"name":"j"},{"name":"f"}],"output":{"name":"mergeby"}}],[11,"merge_join_by","","Create an iterator that merges items from both this and the specified iterator in ascending order.",57,{"inputs":[{"name":"self"},{"name":"j"},{"name":"f"}],"output":{"name":"mergejoinby"}}],[11,"kmerge","","Return an iterator adaptor that flattens an iterator of iterators by merging them in ascending order.",57,{"inputs":[{"name":"self"}],"output":{"name":"kmerge"}}],[11,"kmerge_by","","Return an iterator adaptor that flattens an iterator of iterators by merging them according to the given closure.",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"kmergeby"}}],[11,"cartesian_product","","Return an iterator adaptor that iterates over the cartesian product of the element sets of two iterators `self` and `J`.",57,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"product"}}],[11,"multi_cartesian_product","","Return an iterator adaptor that iterates over the cartesian product of all subiterators returned by meta-iterator `self`.",57,{"inputs":[{"name":"self"}],"output":{"name":"multiproduct"}}],[11,"coalesce","","Return an iterator adaptor that uses the passed-in closure to optionally merge together consecutive elements.",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"coalesce"}}],[11,"dedup","","Remove duplicates from sections of consecutive identical elements. If the iterator is sorted, all elements will be unique.",57,{"inputs":[{"name":"self"}],"output":{"name":"dedup"}}],[11,"unique","","Return an iterator adaptor that filters out elements that have already been produced once during the iteration. Duplicates are detected using hash and equality.",57,{"inputs":[{"name":"self"}],"output":{"name":"unique"}}],[11,"unique_by","","Return an iterator adaptor that filters out elements that have already been produced once during the iteration.",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"uniqueby"}}],[11,"peeking_take_while","","Return an iterator adaptor that borrows from this iterator and takes items while the closure `accept` returns `true`.",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"peekingtakewhile"}}],[11,"take_while_ref","","Return an iterator adaptor that borrows from a `Clone`-able iterator to only pick off elements while the predicate `accept` returns `true`.",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"takewhileref"}}],[11,"while_some","","Return an iterator adaptor that filters `Option<A>` iterator elements and produces `A`. Stops on the first `None` encountered.",57,{"inputs":[{"name":"self"}],"output":{"name":"whilesome"}}],[11,"tuple_combinations","","Return an iterator adaptor that iterates over the combinations of the elements from an iterator.",57,{"inputs":[{"name":"self"}],"output":{"name":"tuplecombinations"}}],[11,"combinations","","Return an iterator adaptor that iterates over the `n`-length combinations of the elements from an iterator.",57,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"combinations"}}],[11,"pad_using","","Return an iterator adaptor that pads the sequence to a minimum length of `min` by filling missing elements using a closure `f`.",57,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"padusing"}}],[11,"flatten","","Flatten an iterator of iterables into a single combined sequence of all the elements in the iterables.",57,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"with_position","","Return an iterator adaptor that wraps each element in a `Position` to ease special-case handling of the first or last elements.",57,{"inputs":[{"name":"self"}],"output":{"name":"withposition"}}],[11,"positions","","Return an iterator adaptor that yields the indices of all elements satisfying a predicate, counted from the start of the iterator.",57,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"positions"}}],[11,"update","","Return an iterator adaptor that applies a mutating function to each element before yielding it.",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"update"}}],[11,"next_tuple","","Advances the iterator and returns the next items grouped in a tuple of a specific size (up to 4).",57,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"collect_tuple","","Collects all items from the iterator into a tuple of a specific size (up to 4).",57,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"find_position","","Find the position and value of the first element satisfying a predicate.",57,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"all_equal","","Check whether all elements compare equal.",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"dropping","","Consume the first `n` elements from the iterator eagerly, and return the same iterator again.",57,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"dropping_back","","Consume the last `n` elements from the iterator eagerly, and return the same iterator again.",57,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"foreach","","Run the closure `f` eagerly on each element of the iterator.",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"concat","","Combine all an iterator's elements into one element by using `Extend`.",57,null],[11,"collect_vec","","`.collect_vec()` is simply a type specialization of `.collect()`, for convenience.",57,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"set_from","","Assign to each reference in `self` from the `from` iterator, stopping at the shortest of the two iterators.",57,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"usize"}}],[11,"join","","Combine all iterator elements into one String, seperated by `sep`.",57,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"format","","Format all iterator elements, separated by `sep`.",57,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"format"}}],[11,"format_with","","Format all iterator elements, separated by `sep`.",57,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"formatwith"}}],[11,"fold_results","","Fold `Result` values from an iterator.",57,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"result"}}],[11,"fold_options","","Fold `Option` values from an iterator.",57,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"option"}}],[11,"fold1","","Accumulator of the elements in the iterator.",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"tree_fold1","","Accumulate the elements in the iterator in a tree-like manner.",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"fold_while","","An iterator method that applies a function, producing a single, final value.",57,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"foldwhile"}}],[11,"sorted","","Collect all iterator elements into a sorted vector in ascending order.",57,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"sorted_by","","Collect all iterator elements into a sorted vector.",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"vec"}}],[11,"sorted_by_key","","Collect all iterator elements into a sorted vector.",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"vec"}}],[11,"partition_map","","Collect all iterator elements into one of two partitions. Unlike `Iterator::partition`, each partition may have a distinct type.",57,null],[11,"into_group_map","","Return a `HashMap` of keys mapped to `Vec`s of values. Keys and values are taken from `(Key, Value)` tuple pairs yielded by the input iterator.",57,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"hashmap"}}],[11,"minmax","","Return the minimum and maximum elements in the iterator.",57,{"inputs":[{"name":"self"}],"output":{"name":"minmaxresult"}}],[11,"minmax_by_key","","Return the minimum and maximum element of an iterator, as determined by the specified function.",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"minmaxresult"}}],[11,"minmax_by","","Return the minimum and maximum element of an iterator, as determined by the specified comparison function.",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"minmaxresult"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"foldwhile"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_inner","","Return the value in the continue or done.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"is_done","","Return true if `self` is `Done`, false if it is `Continue`.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[14,"iproduct","","Create an iterator over the “cartesian product” of iterators.",null,null],[14,"izip","","Create an iterator running multiple iterators in lockstep.",null,null],[11,"is_left","","Return true if the value is the `Left` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,{"inputs":[{"name":"self"},{"name":"ctx"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"into_iter","","Convert the inner value to an iterator.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"into_inner","","Extract the value of an either over two equivalent types.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",0,null],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"fold","","",0,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"count","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"collect","","",0,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"all","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"extend","","",0,null],[11,"hash","","",0,null],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"ordering"}}],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deref_mut","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"from","","",0,{"inputs":[{"name":"result"}],"output":{"name":"either"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"as_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}]],"paths":[[4,"Either"],[4,"Diff"],[4,"MinMaxResult"],[4,"Position"],[4,"EitherOrBoth"],[4,"FoldWhile"],[3,"RcIter"],[3,"Unfold"],[3,"MultiProduct"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"PutBack"],[3,"Product"],[3,"Batching"],[3,"Step"],[3,"Merge"],[3,"MergeBy"],[3,"Coalesce"],[3,"Dedup"],[3,"TakeWhileRef"],[3,"WhileSome"],[3,"TupleCombinations"],[3,"Flatten"],[3,"MapResults"],[3,"Positions"],[3,"Update"],[3,"ConsTuples"],[3,"Combinations"],[3,"Format"],[3,"FormatWith"],[3,"Groups"],[3,"Group"],[3,"Chunks"],[3,"Chunk"],[3,"Intersperse"],[3,"KMerge"],[3,"KMergeBy"],[3,"MergeJoinBy"],[3,"MultiPeek"],[3,"PadUsing"],[3,"PutBackN"],[3,"PeekingTakeWhile"],[3,"ProcessResults"],[3,"RepeatN"],[3,"RepeatCall"],[3,"Iterate"],[3,"Tee"],[3,"TupleBuffer"],[3,"Tuples"],[3,"TupleWindows"],[3,"UniqueBy"],[3,"Unique"],[3,"WithPosition"],[3,"ZipEq"],[3,"ZipLongest"],[3,"Zip"],[8,"PeekingNext"],[8,"Itertools"]]};
searchIndex["svg"] = {"doc":"An SVG composer and parser.","items":[[5,"open","svg","Open a document.",null,{"inputs":[{"name":"t"}],"output":{"generics":["parser"],"name":"result"}}],[5,"read","","Read a document.",null,{"inputs":[{"name":"t"}],"output":{"generics":["parser"],"name":"result"}}],[5,"save","","Save a document.",null,{"inputs":[{"name":"t"},{"name":"u"}],"output":{"name":"result"}}],[5,"write","","Write a document.",null,{"inputs":[{"name":"t"},{"name":"u"}],"output":{"name":"result"}}],[0,"node","","The nodes.",null,null],[3,"Text","svg::node","A text node.",null,null],[3,"Value","","A value of an attribute.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"text"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a node.",0,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"append","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"assign","","",0,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"f32"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"bool"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"str"}],"output":{"name":"value"}}],[11,"from","","",1,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from","","",1,null],[11,"from","","",1,null],[0,"element","","The element nodes.",null,null],[3,"Animate","svg::node::element","An [`animate`][1] element. [1]: https://www.w3.org/TR/SVG/animate.html#AnimateElement",null,null],[3,"AnimateColor","","An [`animateColor`][1] element. [1]: https://www.w3.org/TR/SVG/animate.html#AnimateColorElement",null,null],[3,"AnimateMotion","","An [`animateMotion`][1] element. [1]: https://www.w3.org/TR/SVG/animate.html#AnimateMotionElement",null,null],[3,"AnimateTransform","","An [`animateTransform`][1] element. [1]: https://www.w3.org/TR/SVG/animate.html#AnimateTransformElement",null,null],[3,"Circle","","A [`circle`][1] element. [1]: https://www.w3.org/TR/SVG/shapes.html#CircleElement",null,null],[3,"ClipPath","","A [`clipPath`][1] element. [1]: https://www.w3.org/TR/SVG/masking.html#ClipPathElement",null,null],[3,"Definitions","","A [`defs`][1] element. [1]: https://www.w3.org/TR/SVG/struct.html#DefsElement",null,null],[3,"Description","","A [`desc`][1] element. [1]: https://www.w3.org/TR/SVG/struct.html#DescElement",null,null],[3,"Ellipse","","An [`ellipse`][1] element. [1]: https://www.w3.org/TR/SVG/shapes.html#EllipseElement",null,null],[3,"Filter","","A [`filter`][1] element. [1]: https://www.w3.org/TR/SVG/filters.html#FilterElement",null,null],[3,"Group","","A [`g`][1] element. [1]: https://www.w3.org/TR/SVG/struct.html#GElement",null,null],[3,"Image","","An [`image`][1] element. [1]: https://www.w3.org/TR/SVG/struct.html#ImageElement",null,null],[3,"Line","","A [`line`][1] element. [1]: https://www.w3.org/TR/SVG/shapes.html#LineElement",null,null],[3,"LinearGradient","","A [`linearGradient`][1] element. [1]: https://www.w3.org/TR/SVG/pservers.html#LinearGradientElement",null,null],[3,"Link","","An [`a`][1] element. [1]: https://www.w3.org/TR/SVG/linking.html#AElement",null,null],[3,"Marker","","A [`marker`][1] element. [1]: https://www.w3.org/TR/SVG/painting.html#MarkerElement",null,null],[3,"Mask","","A [`mask`][1] element. [1]: https://www.w3.org/TR/SVG/masking.html#MaskElement",null,null],[3,"MotionPath","","An [`mpath`][1] element. [1]: https://www.w3.org/TR/SVG/animate.html#MPathElement",null,null],[3,"Path","","A [`path`][1] element. [1]: https://www.w3.org/TR/SVG/paths.html#PathElement",null,null],[3,"Pattern","","A [`pattern`][1] element. [1]: https://www.w3.org/TR/SVG/pservers.html#PatternElement",null,null],[3,"Polygon","","A [`polygon`][1] element. [1]: https://www.w3.org/TR/SVG/shapes.html#PolygonElement",null,null],[3,"Polyline","","A [`polyline`][1] element. [1]: https://www.w3.org/TR/SVG/shapes.html#PolylineElement",null,null],[3,"RadialGradient","","A [`radialGradient`][1] element. [1]: https://www.w3.org/TR/SVG/pservers.html#RadialGradientElement",null,null],[3,"Rectangle","","A [`rect`][1] element. [1]: https://www.w3.org/TR/SVG/shapes.html#RectElement",null,null],[3,"Stop","","A [`stop`][1] element. [1]: https://www.w3.org/TR/SVG/pservers.html#StopElement",null,null],[3,"Symbol","","A [`symbol`][1] element. [1]: https://www.w3.org/TR/SVG/struct.html#SymbolElement",null,null],[3,"Text","","A [`text`][1] element. [1]: https://www.w3.org/TR/SVG/text.html#TextElement",null,null],[3,"TextPath","","A [`textPath`][1] element. [1]: https://www.w3.org/TR/SVG/text.html#TextPathElement",null,null],[3,"Title","","A [`title`][1] element. [1]: https://www.w3.org/TR/SVG/struct.html#TitleElement",null,null],[3,"Use","","A [`use`][1] element. [1]: https://www.w3.org/TR/SVG/struct.html#UseElement",null,null],[3,"SVG","","An [`svg`][1] element. [1]: https://www.w3.org/TR/SVG/struct.html#SVGElement",null,null],[3,"Script","","A [`script`][1] element. [1]: https://www.w3.org/TR/SVG/script.html#ScriptElement",null,null],[3,"Style","","A [`style`][1] element. [1]: https://www.w3.org/TR/SVG/styling.html#StyleElement",null,null],[0,"path","","The path element.",null,null],[3,"Data","svg::node::element::path","A [data][1] attribute.",null,null],[3,"Parameters","","Parameters of a command.",null,null],[4,"Command","","A command of a data attribute.",null,null],[13,"Move","","[Establish][1] a new current point.",2,null],[13,"Line","","[Draw][1] straight lines.",2,null],[13,"HorizontalLine","","[Draw][1] horizontal lines.",2,null],[13,"VerticalLine","","[Draw][1] vertical lines.",2,null],[13,"QuadraticCurve","","[Draw][1] a quadratic Bézier curve.",2,null],[13,"SmoothQuadraticCurve","","[Draw][1] a quadratic Bézier curve assuming the control point to be the reflection of the control point on the previous command relative to the current point.",2,null],[13,"CubicCurve","","[Draw][1] a cubic Bézier curve.",2,null],[13,"SmoothCubicCurve","","[Draw][1] a cubic Bézier curve assuming the first control point to be the reflection of the second control point on the previous command relative to the current point.",2,null],[13,"EllipticalArc","","[Draw][1] an elliptical arc.",2,null],[13,"Close","","[End][1] the current subpath.",2,null],[4,"Position","","A positioning method.",null,null],[13,"Absolute","","Absolute.",3,null],[13,"Relative","","Relative.",3,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"command"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"data"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"data"}}],[11,"new","","Create a data attribute.",4,{"inputs":[],"output":{"name":"self"}}],[11,"parse","","Parse a data attribute.",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"move_to","","Add an absolute `Command::Move` command.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"move_by","","Add a relative `Command::Move` command.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"line_to","","Add an absolute `Command::Line` command.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"line_by","","Add a relative `Command::Line` command.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"horizontal_line_to","","Add an absolute `Command::HorizontalLine` command.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"horizontal_line_by","","Add a relative `Command::HorizontalLine` command.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"vertical_line_to","","Add an absolute `Command::VerticalLine` command.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"vertical_line_by","","Add a relative `Command::VerticalLine` command.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"quadratic_curve_to","","Add an absolute `Command::QuadraticCurve` command.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"quadratic_curve_by","","Add a relative `Command::QuadraticCurve` command.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"smooth_quadratic_curve_to","","Add an absolute `Command::SmoothQuadraticCurve` command.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"smooth_quadratic_curve_by","","Add a relative `Command::SmoothQuadraticCurve` command.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"cubic_curve_to","","Add an absolute `Command::CubicCurve` command.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"cubic_curve_by","","Add a relative `Command::CubicCurve` command.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"smooth_cubic_curve_to","","Add an absolute `Command::SmoothCubicCurve` command.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"smooth_cubic_curve_by","","Add a relative `Command::SmoothCubicCurve` command.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"elliptical_arc_to","","Add an absolute `Command::EllipticalArc` command.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"elliptical_arc_by","","Add a relative `Command::EllipticalArc` command.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"close","","Add a `Command::Close` command.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deref","","",4,null],[11,"from","","",4,{"inputs":[{"generics":["command"],"name":"vec"}],"output":{"name":"self"}}],[11,"from","svg::node","",1,{"inputs":[{"name":"data"}],"output":{"name":"self"}}],[11,"clone","svg::node::element::path","",5,{"inputs":[{"name":"self"}],"output":{"name":"parameters"}}],[11,"deref","","",5,null],[11,"from","","",5,{"inputs":[{"generics":["number"],"name":"vec"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"f32"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"from","","",5,null],[11,"from","","",5,null],[11,"from","","",5,null],[11,"from","","",5,null],[11,"from","","",5,null],[11,"from","","",5,null],[11,"from","","",5,null],[6,"Number","","A number.",null,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[0,"tag","svg::node::element","The tags.",null,null],[3,"Tag","svg::node::element::tag","A tag.",null,null],[12,"0","","",6,null],[12,"1","","",6,null],[12,"2","","",6,null],[4,"Type","","A [type][1] of a tag.",null,null],[13,"Start","","A start tag.",7,null],[13,"End","","An end tag.",7,null],[13,"Empty","","An empty tag.",7,null],[17,"Animate","","animate",null,null],[17,"AnimateColor","","animateColor",null,null],[17,"AnimateMotion","","animateMotion",null,null],[17,"AnimateTransform","","animateTransform",null,null],[17,"Circle","","circle",null,null],[17,"ClipPath","","clipPath",null,null],[17,"Definitions","","defs",null,null],[17,"Description","","desc",null,null],[17,"Ellipse","","ellipse",null,null],[17,"Filter","","filter",null,null],[17,"Group","","g",null,null],[17,"Image","","image",null,null],[17,"Line","","line",null,null],[17,"LinearGradient","","linearGradient",null,null],[17,"Link","","a",null,null],[17,"Marker","","marker",null,null],[17,"Mask","","mask",null,null],[17,"MotionPath","","mpath",null,null],[17,"Path","","path",null,null],[17,"Pattern","","pattern",null,null],[17,"Polygon","","polygon",null,null],[17,"Polyline","","polyline",null,null],[17,"RadialGradient","","radialGradient",null,null],[17,"Rectangle","","rect",null,null],[17,"Script","","script",null,null],[17,"Stop","","stop",null,null],[17,"Style","","style",null,null],[17,"SVG","","svg",null,null],[17,"Symbol","","symbol",null,null],[17,"Text","","text",null,null],[17,"TextPath","","textPath",null,null],[17,"Title","","title",null,null],[17,"Use","","use",null,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"tag"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"parse","","Parse a tag.",6,{"inputs":[{"name":"str"}],"output":{"generics":["tag"],"name":"result"}}],[11,"clone","svg::node::element","",8,{"inputs":[{"name":"self"}],"output":{"name":"animate"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a node.",8,{"inputs":[],"output":{"name":"self"}}],[11,"add","","Append a node.",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"set","","Assign an attribute.",8,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"append","","",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"assign","","",8,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":null}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"animatecolor"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a node.",9,{"inputs":[],"output":{"name":"self"}}],[11,"add","","Append a node.",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"set","","Assign an attribute.",9,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"append","","",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"assign","","",9,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":null}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"animatemotion"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a node.",10,{"inputs":[],"output":{"name":"self"}}],[11,"add","","Append a node.",10,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"set","","Assign an attribute.",10,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"append","","",10,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"assign","","",10,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":null}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"animatetransform"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a node.",11,{"inputs":[],"output":{"name":"self"}}],[11,"add","","Append a node.",11,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"set","","Assign an attribute.",11,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"append","","",11,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"assign","","",11,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":null}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"circle"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a node.",12,{"inputs":[],"output":{"name":"self"}}],[11,"add","","Append a node.",12,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"set","","Assign an attribute.",12,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"append","","",12,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"assign","","",12,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":null}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"clippath"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a node.",13,{"inputs":[],"output":{"name":"self"}}],[11,"add","","Append a node.",13,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"set","","Assign an attribute.",13,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"append","","",13,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"assign","","",13,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":null}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"definitions"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a node.",14,{"inputs":[],"output":{"name":"self"}}],[11,"add","","Append a node.",14,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"set","","Assign an attribute.",14,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"append","","",14,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"assign","","",14,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":null}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"description"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a node.",15,{"inputs":[],"output":{"name":"self"}}],[11,"add","","Append a node.",15,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"set","","Assign an attribute.",15,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"append","","",15,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"assign","","",15,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":null}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"ellipse"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a node.",16,{"inputs":[],"output":{"name":"self"}}],[11,"add","","Append a node.",16,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"set","","Assign an attribute.",16,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"append","","",16,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"assign","","",16,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":null}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"filter"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a node.",17,{"inputs":[],"output":{"name":"self"}}],[11,"add","","Append a node.",17,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"set","","Assign an attribute.",17,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"append","","",17,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"assign","","",17,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":null}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a node.",18,{"inputs":[],"output":{"name":"self"}}],[11,"add","","Append a node.",18,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"set","","Assign an attribute.",18,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"append","","",18,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"assign","","",18,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":null}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"image"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a node.",19,{"inputs":[],"output":{"name":"self"}}],[11,"add","","Append a node.",19,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"set","","Assign an attribute.",19,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"append","","",19,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"assign","","",19,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":null}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"line"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a node.",20,{"inputs":[],"output":{"name":"self"}}],[11,"add","","Append a node.",20,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"set","","Assign an attribute.",20,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"append","","",20,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"assign","","",20,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":null}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"lineargradient"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a node.",21,{"inputs":[],"output":{"name":"self"}}],[11,"add","","Append a node.",21,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"set","","Assign an attribute.",21,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"append","","",21,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"assign","","",21,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":null}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"link"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a node.",22,{"inputs":[],"output":{"name":"self"}}],[11,"add","","Append a node.",22,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"set","","Assign an attribute.",22,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"append","","",22,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"assign","","",22,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":null}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"marker"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a node.",23,{"inputs":[],"output":{"name":"self"}}],[11,"add","","Append a node.",23,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"set","","Assign an attribute.",23,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"append","","",23,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"assign","","",23,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":null}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"mask"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a node.",24,{"inputs":[],"output":{"name":"self"}}],[11,"add","","Append a node.",24,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"set","","Assign an attribute.",24,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"append","","",24,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"assign","","",24,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":null}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"motionpath"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a node.",25,{"inputs":[],"output":{"name":"self"}}],[11,"add","","Append a node.",25,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"set","","Assign an attribute.",25,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"append","","",25,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"assign","","",25,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":null}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a node.",26,{"inputs":[],"output":{"name":"self"}}],[11,"add","","Append a node.",26,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"set","","Assign an attribute.",26,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"append","","",26,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"assign","","",26,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":null}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"pattern"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a node.",27,{"inputs":[],"output":{"name":"self"}}],[11,"add","","Append a node.",27,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"set","","Assign an attribute.",27,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"append","","",27,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"assign","","",27,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":null}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"polygon"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a node.",28,{"inputs":[],"output":{"name":"self"}}],[11,"add","","Append a node.",28,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"set","","Assign an attribute.",28,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"append","","",28,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"assign","","",28,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":null}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"polyline"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a node.",29,{"inputs":[],"output":{"name":"self"}}],[11,"add","","Append a node.",29,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"set","","Assign an attribute.",29,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"append","","",29,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"assign","","",29,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":null}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"radialgradient"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a node.",30,{"inputs":[],"output":{"name":"self"}}],[11,"add","","Append a node.",30,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"set","","Assign an attribute.",30,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"append","","",30,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"assign","","",30,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":null}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"rectangle"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a node.",31,{"inputs":[],"output":{"name":"self"}}],[11,"add","","Append a node.",31,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"set","","Assign an attribute.",31,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"append","","",31,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"assign","","",31,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":null}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"stop"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a node.",32,{"inputs":[],"output":{"name":"self"}}],[11,"add","","Append a node.",32,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"set","","Assign an attribute.",32,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"append","","",32,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"assign","","",32,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":null}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a node.",33,{"inputs":[],"output":{"name":"self"}}],[11,"add","","Append a node.",33,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"set","","Assign an attribute.",33,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"append","","",33,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"assign","","",33,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":null}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"text"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a node.",34,{"inputs":[],"output":{"name":"self"}}],[11,"add","","Append a node.",34,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"set","","Assign an attribute.",34,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"append","","",34,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"assign","","",34,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":null}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"textpath"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a node.",35,{"inputs":[],"output":{"name":"self"}}],[11,"add","","Append a node.",35,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"set","","Assign an attribute.",35,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"append","","",35,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"assign","","",35,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":null}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"title"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a node.",36,{"inputs":[],"output":{"name":"self"}}],[11,"add","","Append a node.",36,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"set","","Assign an attribute.",36,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"append","","",36,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"assign","","",36,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":null}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"use"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a node.",37,{"inputs":[],"output":{"name":"self"}}],[11,"add","","Append a node.",37,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"set","","Assign an attribute.",37,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"append","","",37,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"assign","","",37,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":null}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"svg"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a node.",38,{"inputs":[],"output":{"name":"self"}}],[11,"add","","Append a node.",38,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"set","","Assign an attribute.",38,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"append","","",38,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"assign","","",38,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":null}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"script"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a node.",39,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"add","","Append a node.",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"set","","Assign an attribute.",39,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"append","","",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"assign","","",39,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":null}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a node.",40,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"add","","Append a node.",40,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"set","","Assign an attribute.",40,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"append","","",40,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"assign","","",40,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":null}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Attributes","svg::node","Attributes.",null,null],[6,"Children","","Child nodes.",null,null],[8,"Node","","A node.",null,null],[10,"append","","Append a child node.",41,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[10,"assign","","Assign an attribute.",41,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":null}],[0,"parser","svg","The parser.",null,null],[3,"Error","svg::parser","An error.",null,null],[3,"Parser","","A parser.",null,null],[4,"Event","","An event.",null,null],[13,"Error","","An error.",42,null],[13,"Tag","","A tag.",42,null],[13,"Text","","A text.",42,null],[13,"Comment","","A comment.",42,null],[13,"Declaration","","A declaration.",42,null],[13,"Instruction","","An instruction.",42,null],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create an error.",43,null],[11,"description","","",43,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Result","","A result.",null,null],[11,"new","","Create a parser.",44,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"next","","",44,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[6,"Document","svg","A document.",null,null]],"paths":[[3,"Text"],[3,"Value"],[4,"Command"],[4,"Position"],[3,"Data"],[3,"Parameters"],[3,"Tag"],[4,"Type"],[3,"Animate"],[3,"AnimateColor"],[3,"AnimateMotion"],[3,"AnimateTransform"],[3,"Circle"],[3,"ClipPath"],[3,"Definitions"],[3,"Description"],[3,"Ellipse"],[3,"Filter"],[3,"Group"],[3,"Image"],[3,"Line"],[3,"LinearGradient"],[3,"Link"],[3,"Marker"],[3,"Mask"],[3,"MotionPath"],[3,"Path"],[3,"Pattern"],[3,"Polygon"],[3,"Polyline"],[3,"RadialGradient"],[3,"Rectangle"],[3,"Stop"],[3,"Symbol"],[3,"Text"],[3,"TextPath"],[3,"Title"],[3,"Use"],[3,"SVG"],[3,"Script"],[3,"Style"],[8,"Node"],[4,"Event"],[3,"Error"],[3,"Parser"]]};
initSearch(searchIndex);
